; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @cross_entropy_bwd_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, float %5, float %6, float %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !11
  %17 = sext i32 %15 to i64, !dbg !12
  %18 = getelementptr i64, ptr addrspace(1) %4, i64 %17, !dbg !12
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !13
  %20 = sext i32 %8 to i64, !dbg !14
  %.not = icmp eq i64 %19, %20, !dbg !14
  br i1 %.not, label %25, label %21, !dbg !15

21:                                               ; preds = %14
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !17
  %24 = bitcast i32 %23 to float, !dbg !17
  br label %25, !dbg !15

25:                                               ; preds = %21, %14
  %26 = phi float [ %24, %21 ], [ 0.000000e+00, %14 ], !dbg !15
  %27 = shl i32 %16, 12, !dbg !18
  %28 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %29 = shl i32 %28, 3, !dbg !19
  %30 = and i32 %29, 2040, !dbg !19
  %31 = sext i32 %13 to i64, !dbg !20
  %32 = mul nsw i64 %17, %31, !dbg !21
  %33 = getelementptr bfloat, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = sext i32 %12 to i64, !dbg !23
  %35 = mul nsw i64 %17, %34, !dbg !24
  %36 = getelementptr bfloat, ptr addrspace(1) %2, i64 %35, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !26
  %38 = fmul float %7, 2.000000e+00, !dbg !27
  %39 = sext i32 %10 to i64, !dbg !28
  %40 = sub i64 %19, %39, !dbg !28
  %41 = or disjoint i32 %27, %30, !dbg !19
  %42 = or disjoint i32 %41, 2048, !dbg !29
  %43 = insertelement <8 x i32> poison, i32 %41, i64 0, !dbg !29
  %44 = shufflevector <8 x i32> %43, <8 x i32> poison, <8 x i32> zeroinitializer, !dbg !29
  %45 = or disjoint <8 x i32> %44, <i32 2055, i32 2054, i32 2053, i32 2052, i32 2051, i32 2050, i32 2049, i32 2048>, !dbg !29
  %46 = or disjoint i32 %41, 7, !dbg !29
  %47 = or disjoint i32 %41, 6, !dbg !29
  %48 = or disjoint i32 %41, 5, !dbg !29
  %49 = or disjoint i32 %41, 4, !dbg !29
  %50 = or disjoint i32 %41, 3, !dbg !29
  %51 = or disjoint i32 %41, 2, !dbg !29
  %52 = or disjoint i32 %41, 1, !dbg !29
  %53 = icmp slt i32 %41, %11, !dbg !30
  %54 = icmp slt i32 %42, %11, !dbg !30
  %55 = shufflevector <8 x i32> %45, <8 x i32> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !31
  %56 = insertelement <16 x i32> %55, i32 %46, i64 8, !dbg !31
  %57 = insertelement <16 x i32> %56, i32 %47, i64 9, !dbg !31
  %58 = insertelement <16 x i32> %57, i32 %48, i64 10, !dbg !31
  %59 = insertelement <16 x i32> %58, i32 %49, i64 11, !dbg !31
  %60 = insertelement <16 x i32> %59, i32 %50, i64 12, !dbg !31
  %61 = insertelement <16 x i32> %60, i32 %51, i64 13, !dbg !31
  %62 = insertelement <16 x i32> %61, i32 %52, i64 14, !dbg !31
  %63 = insertelement <16 x i32> %62, i32 %41, i64 15, !dbg !31
  %64 = sext i32 %41 to i64, !dbg !32
  %65 = getelementptr bfloat, ptr addrspace(1) %36, i64 %64, !dbg !33
  %66 = extractelement <8 x i32> %45, i64 7, !dbg !32
  %67 = sext i32 %66 to i64, !dbg !32
  %68 = getelementptr bfloat, ptr addrspace(1) %36, i64 %67, !dbg !33
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %53, i32 -8323200, i1 %53, i32 -8323200, i1 %53, i32 -8323200, i1 %53, i32 -8323200, i1 %53) #1, !dbg !34
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !34
  %71 = bitcast i32 %70 to <2 x bfloat>, !dbg !34
  %72 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !34
  %73 = bitcast i32 %72 to <2 x bfloat>, !dbg !34
  %74 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !34
  %75 = bitcast i32 %74 to <2 x bfloat>, !dbg !34
  %76 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !34
  %77 = bitcast i32 %76 to <2 x bfloat>, !dbg !34
  %78 = extractelement <2 x bfloat> %71, i64 0, !dbg !34
  %79 = extractelement <2 x bfloat> %71, i64 1, !dbg !34
  %80 = extractelement <2 x bfloat> %73, i64 0, !dbg !34
  %81 = extractelement <2 x bfloat> %73, i64 1, !dbg !34
  %82 = extractelement <2 x bfloat> %75, i64 0, !dbg !34
  %83 = extractelement <2 x bfloat> %75, i64 1, !dbg !34
  %84 = extractelement <2 x bfloat> %77, i64 0, !dbg !34
  %85 = extractelement <2 x bfloat> %77, i64 1, !dbg !34
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %54, i32 -8323200, i1 %54, i32 -8323200, i1 %54, i32 -8323200, i1 %54, i32 -8323200, i1 %54) #1, !dbg !34
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !34
  %88 = bitcast i32 %87 to <2 x bfloat>, !dbg !34
  %89 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !34
  %90 = bitcast i32 %89 to <2 x bfloat>, !dbg !34
  %91 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !34
  %92 = bitcast i32 %91 to <2 x bfloat>, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !34
  %94 = bitcast i32 %93 to <2 x bfloat>, !dbg !34
  %95 = extractelement <2 x bfloat> %88, i64 0, !dbg !34
  %96 = extractelement <2 x bfloat> %88, i64 1, !dbg !34
  %97 = extractelement <2 x bfloat> %90, i64 0, !dbg !34
  %98 = extractelement <2 x bfloat> %90, i64 1, !dbg !34
  %99 = extractelement <2 x bfloat> %92, i64 0, !dbg !34
  %100 = extractelement <2 x bfloat> %92, i64 1, !dbg !34
  %101 = extractelement <2 x bfloat> %94, i64 0, !dbg !34
  %102 = extractelement <2 x bfloat> %94, i64 1, !dbg !34
  %103 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %78) #1, !dbg !35
  %104 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %79) #1, !dbg !35
  %105 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %80) #1, !dbg !35
  %106 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %81) #1, !dbg !35
  %107 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %82) #1, !dbg !35
  %108 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %83) #1, !dbg !35
  %109 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %84) #1, !dbg !35
  %110 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %85) #1, !dbg !35
  %111 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %95) #1, !dbg !35
  %112 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %96) #1, !dbg !35
  %113 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %97) #1, !dbg !35
  %114 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %98) #1, !dbg !35
  %115 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %99) #1, !dbg !35
  %116 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %100) #1, !dbg !35
  %117 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %101) #1, !dbg !35
  %118 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %102) #1, !dbg !35
  %119 = fmul float %6, %103, !dbg !36
  %120 = fmul float %6, %104, !dbg !36
  %121 = fmul float %6, %105, !dbg !36
  %122 = fmul float %6, %106, !dbg !36
  %123 = fmul float %6, %107, !dbg !36
  %124 = fmul float %6, %108, !dbg !36
  %125 = fmul float %6, %109, !dbg !36
  %126 = fmul float %6, %110, !dbg !36
  %127 = fmul float %6, %111, !dbg !36
  %128 = fmul float %6, %112, !dbg !36
  %129 = fmul float %6, %113, !dbg !36
  %130 = fmul float %6, %114, !dbg !36
  %131 = fmul float %6, %115, !dbg !36
  %132 = fmul float %6, %116, !dbg !36
  %133 = fmul float %6, %117, !dbg !36
  %134 = fmul float %6, %118, !dbg !36
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !37
  %136 = bitcast i32 %135 to float, !dbg !37
  %137 = fsub float %119, %136, !dbg !38
  %138 = fsub float %120, %136, !dbg !38
  %139 = fsub float %121, %136, !dbg !38
  %140 = fsub float %122, %136, !dbg !38
  %141 = fsub float %123, %136, !dbg !38
  %142 = fsub float %124, %136, !dbg !38
  %143 = fsub float %125, %136, !dbg !38
  %144 = fsub float %126, %136, !dbg !38
  %145 = fsub float %127, %136, !dbg !38
  %146 = fsub float %128, %136, !dbg !38
  %147 = fsub float %129, %136, !dbg !38
  %148 = fsub float %130, %136, !dbg !38
  %149 = fsub float %131, %136, !dbg !38
  %150 = fsub float %132, %136, !dbg !38
  %151 = fsub float %133, %136, !dbg !38
  %152 = fsub float %134, %136, !dbg !38
  %153 = fmul float %137, 0x3FF7154760000000, !dbg !39
  %154 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %153) #1, !dbg !39
  %155 = fmul float %138, 0x3FF7154760000000, !dbg !39
  %156 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %155) #1, !dbg !39
  %157 = fmul float %139, 0x3FF7154760000000, !dbg !39
  %158 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %157) #1, !dbg !39
  %159 = fmul float %140, 0x3FF7154760000000, !dbg !39
  %160 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %159) #1, !dbg !39
  %161 = fmul float %141, 0x3FF7154760000000, !dbg !39
  %162 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %161) #1, !dbg !39
  %163 = fmul float %142, 0x3FF7154760000000, !dbg !39
  %164 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %163) #1, !dbg !39
  %165 = fmul float %143, 0x3FF7154760000000, !dbg !39
  %166 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %165) #1, !dbg !39
  %167 = fmul float %144, 0x3FF7154760000000, !dbg !39
  %168 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %167) #1, !dbg !39
  %169 = fmul float %145, 0x3FF7154760000000, !dbg !39
  %170 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %169) #1, !dbg !39
  %171 = fmul float %146, 0x3FF7154760000000, !dbg !39
  %172 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %171) #1, !dbg !39
  %173 = fmul float %147, 0x3FF7154760000000, !dbg !39
  %174 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %173) #1, !dbg !39
  %175 = fmul float %148, 0x3FF7154760000000, !dbg !39
  %176 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %175) #1, !dbg !39
  %177 = fmul float %149, 0x3FF7154760000000, !dbg !39
  %178 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %177) #1, !dbg !39
  %179 = fmul float %150, 0x3FF7154760000000, !dbg !39
  %180 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %179) #1, !dbg !39
  %181 = fmul float %151, 0x3FF7154760000000, !dbg !39
  %182 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %181) #1, !dbg !39
  %183 = fmul float %152, 0x3FF7154760000000, !dbg !39
  %184 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %183) #1, !dbg !39
  %185 = fmul float %38, %136, !dbg !40
  %186 = fmul float %154, %185, !dbg !41
  %187 = fmul float %185, %156, !dbg !41
  %188 = fmul float %185, %158, !dbg !41
  %189 = fmul float %185, %160, !dbg !41
  %190 = fmul float %185, %162, !dbg !41
  %191 = fmul float %185, %164, !dbg !41
  %192 = fmul float %185, %166, !dbg !41
  %193 = fmul float %185, %168, !dbg !41
  %194 = fmul float %185, %170, !dbg !41
  %195 = fmul float %185, %172, !dbg !41
  %196 = fmul float %185, %174, !dbg !41
  %197 = fmul float %185, %176, !dbg !41
  %198 = fmul float %185, %178, !dbg !41
  %199 = fmul float %185, %180, !dbg !41
  %200 = fmul float %185, %182, !dbg !41
  %201 = fmul float %185, %184, !dbg !41
  %202 = fadd float %154, %186, !dbg !42
  %203 = fadd float %156, %187, !dbg !42
  %204 = fadd float %158, %188, !dbg !42
  %205 = fadd float %160, %189, !dbg !42
  %206 = fadd float %162, %190, !dbg !42
  %207 = fadd float %164, %191, !dbg !42
  %208 = fadd float %166, %192, !dbg !42
  %209 = fadd float %168, %193, !dbg !42
  %210 = fadd float %170, %194, !dbg !42
  %211 = fadd float %172, %195, !dbg !42
  %212 = fadd float %174, %196, !dbg !42
  %213 = fadd float %176, %197, !dbg !42
  %214 = fadd float %178, %198, !dbg !42
  %215 = fadd float %180, %199, !dbg !42
  %216 = fadd float %182, %200, !dbg !42
  %217 = fadd float %184, %201, !dbg !42
  %218 = insertelement <16 x i64> poison, i64 %40, i64 0, !dbg !31
  %219 = shufflevector <16 x i64> %218, <16 x i64> poison, <16 x i32> zeroinitializer, !dbg !31
  %220 = sext <16 x i32> %63 to <16 x i64>, !dbg !31
  %221 = icmp eq <16 x i64> %219, %220, !dbg !31
  %222 = fadd float %202, -1.000000e+00, !dbg !43
  %223 = fadd float %203, -1.000000e+00, !dbg !43
  %224 = fadd float %204, -1.000000e+00, !dbg !43
  %225 = fadd float %205, -1.000000e+00, !dbg !43
  %226 = fadd float %206, -1.000000e+00, !dbg !43
  %227 = fadd float %207, -1.000000e+00, !dbg !43
  %228 = fadd float %208, -1.000000e+00, !dbg !43
  %229 = fadd float %209, -1.000000e+00, !dbg !43
  %230 = fadd float %210, -1.000000e+00, !dbg !43
  %231 = fadd float %211, -1.000000e+00, !dbg !43
  %232 = fadd float %212, -1.000000e+00, !dbg !43
  %233 = fadd float %213, -1.000000e+00, !dbg !43
  %234 = fadd float %214, -1.000000e+00, !dbg !43
  %235 = fadd float %215, -1.000000e+00, !dbg !43
  %236 = fadd float %216, -1.000000e+00, !dbg !43
  %237 = fadd float %217, -1.000000e+00, !dbg !43
  %238 = extractelement <16 x i1> %221, i64 15, !dbg !44
  %239 = select i1 %238, float %222, float %202, !dbg !44
  %240 = extractelement <16 x i1> %221, i64 14, !dbg !44
  %241 = select i1 %240, float %223, float %203, !dbg !44
  %242 = extractelement <16 x i1> %221, i64 13, !dbg !44
  %243 = select i1 %242, float %224, float %204, !dbg !44
  %244 = extractelement <16 x i1> %221, i64 12, !dbg !44
  %245 = select i1 %244, float %225, float %205, !dbg !44
  %246 = extractelement <16 x i1> %221, i64 11, !dbg !44
  %247 = select i1 %246, float %226, float %206, !dbg !44
  %248 = extractelement <16 x i1> %221, i64 10, !dbg !44
  %249 = select i1 %248, float %227, float %207, !dbg !44
  %250 = extractelement <16 x i1> %221, i64 9, !dbg !44
  %251 = select i1 %250, float %228, float %208, !dbg !44
  %252 = extractelement <16 x i1> %221, i64 8, !dbg !44
  %253 = select i1 %252, float %229, float %209, !dbg !44
  %254 = extractelement <16 x i1> %221, i64 7, !dbg !44
  %255 = select i1 %254, float %230, float %210, !dbg !44
  %256 = extractelement <16 x i1> %221, i64 6, !dbg !44
  %257 = select i1 %256, float %231, float %211, !dbg !44
  %258 = extractelement <16 x i1> %221, i64 5, !dbg !44
  %259 = select i1 %258, float %232, float %212, !dbg !44
  %260 = extractelement <16 x i1> %221, i64 4, !dbg !44
  %261 = select i1 %260, float %233, float %213, !dbg !44
  %262 = extractelement <16 x i1> %221, i64 3, !dbg !44
  %263 = select i1 %262, float %234, float %214, !dbg !44
  %264 = extractelement <16 x i1> %221, i64 2, !dbg !44
  %265 = select i1 %264, float %235, float %215, !dbg !44
  %266 = extractelement <16 x i1> %221, i64 1, !dbg !44
  %267 = select i1 %266, float %236, float %216, !dbg !44
  %268 = extractelement <16 x i1> %221, i64 0, !dbg !44
  %269 = select i1 %268, float %237, float %217, !dbg !44
  %270 = getelementptr bfloat, ptr addrspace(1) %33, i64 %64, !dbg !32
  %271 = getelementptr bfloat, ptr addrspace(1) %33, i64 %67, !dbg !32
  %272 = fmul float %6, %26, !dbg !45
  %273 = fmul float %272, %239, !dbg !46
  %274 = fmul float %272, %241, !dbg !46
  %275 = fmul float %272, %243, !dbg !46
  %276 = fmul float %272, %245, !dbg !46
  %277 = fmul float %272, %247, !dbg !46
  %278 = fmul float %272, %249, !dbg !46
  %279 = fmul float %272, %251, !dbg !46
  %280 = fmul float %272, %253, !dbg !46
  %281 = fmul float %272, %255, !dbg !46
  %282 = fmul float %272, %257, !dbg !46
  %283 = fmul float %272, %259, !dbg !46
  %284 = fmul float %272, %261, !dbg !46
  %285 = fmul float %272, %263, !dbg !46
  %286 = fmul float %272, %265, !dbg !46
  %287 = fmul float %272, %267, !dbg !46
  %288 = fmul float %272, %269, !dbg !46
  %289 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %273) #1, !dbg !47
  %290 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %274) #1, !dbg !47
  %291 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %275) #1, !dbg !47
  %292 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %276) #1, !dbg !47
  %293 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %277) #1, !dbg !47
  %294 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %278) #1, !dbg !47
  %295 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %279) #1, !dbg !47
  %296 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %280) #1, !dbg !47
  %297 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %281) #1, !dbg !47
  %298 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %282) #1, !dbg !47
  %299 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %283) #1, !dbg !47
  %300 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %284) #1, !dbg !47
  %301 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %285) #1, !dbg !47
  %302 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %286) #1, !dbg !47
  %303 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %287) #1, !dbg !47
  %304 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %288) #1, !dbg !47
  %305 = insertelement <2 x bfloat> poison, bfloat %289, i64 0, !dbg !47
  %306 = insertelement <2 x bfloat> %305, bfloat %290, i64 1, !dbg !47
  %307 = bitcast <2 x bfloat> %306 to i32, !dbg !47
  %308 = insertelement <2 x bfloat> poison, bfloat %291, i64 0, !dbg !47
  %309 = insertelement <2 x bfloat> %308, bfloat %292, i64 1, !dbg !47
  %310 = bitcast <2 x bfloat> %309 to i32, !dbg !47
  %311 = insertelement <2 x bfloat> poison, bfloat %293, i64 0, !dbg !47
  %312 = insertelement <2 x bfloat> %311, bfloat %294, i64 1, !dbg !47
  %313 = bitcast <2 x bfloat> %312 to i32, !dbg !47
  %314 = insertelement <2 x bfloat> poison, bfloat %295, i64 0, !dbg !47
  %315 = insertelement <2 x bfloat> %314, bfloat %296, i64 1, !dbg !47
  %316 = bitcast <2 x bfloat> %315 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %310, i32 %313, i32 %316, ptr addrspace(1) %270, i1 %53) #1, !dbg !47
  %317 = insertelement <2 x bfloat> poison, bfloat %297, i64 0, !dbg !47
  %318 = insertelement <2 x bfloat> %317, bfloat %298, i64 1, !dbg !47
  %319 = bitcast <2 x bfloat> %318 to i32, !dbg !47
  %320 = insertelement <2 x bfloat> poison, bfloat %299, i64 0, !dbg !47
  %321 = insertelement <2 x bfloat> %320, bfloat %300, i64 1, !dbg !47
  %322 = bitcast <2 x bfloat> %321 to i32, !dbg !47
  %323 = insertelement <2 x bfloat> poison, bfloat %301, i64 0, !dbg !47
  %324 = insertelement <2 x bfloat> %323, bfloat %302, i64 1, !dbg !47
  %325 = bitcast <2 x bfloat> %324 to i32, !dbg !47
  %326 = insertelement <2 x bfloat> poison, bfloat %303, i64 0, !dbg !47
  %327 = insertelement <2 x bfloat> %326, bfloat %304, i64 1, !dbg !47
  %328 = bitcast <2 x bfloat> %327 to i32, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %322, i32 %325, i32 %328, ptr addrspace(1) %271, i1 %54) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cross_entropy.py", directory: "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/flash_attn/ops/triton")
!4 = !{ptr @cross_entropy_bwd_kernel, !"kernel", i32 1}
!5 = !{ptr @cross_entropy_bwd_kernel, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "cross_entropy_bwd_kernel", linkageName: "cross_entropy_bwd_kernel", scope: !3, file: !3, line: 104, type: !8, scopeLine: 104, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 123, column: 28, scope: !7)
!11 = !DILocation(line: 124, column: 34, scope: !7)
!12 = !DILocation(line: 128, column: 37, scope: !7)
!13 = !DILocation(line: 128, column: 24, scope: !7)
!14 = !DILocation(line: 129, column: 20, scope: !7)
!15 = !DILocation(line: 129, column: 7, scope: !7)
!16 = !DILocation(line: 130, column: 36, scope: !7)
!17 = !DILocation(line: 130, column: 24, scope: !7)
!18 = !DILocation(line: 127, column: 34, scope: !7)
!19 = !DILocation(line: 127, column: 60, scope: !7)
!20 = !DILocation(line: 126, column: 64, scope: !7)
!21 = !DILocation(line: 126, column: 42, scope: !7)
!22 = !DILocation(line: 126, column: 32, scope: !7)
!23 = !DILocation(line: 125, column: 61, scope: !7)
!24 = !DILocation(line: 125, column: 40, scope: !7)
!25 = !DILocation(line: 125, column: 30, scope: !7)
!26 = !DILocation(line: 136, column: 28, scope: !7)
!27 = !DILocation(line: 138, column: 19, scope: !7)
!28 = !DILocation(line: 139, column: 17, scope: !7)
!29 = !DILocation(line: 127, column: 47, scope: !7)
!30 = !DILocation(line: 133, column: 66, scope: !7)
!31 = !DILocation(line: 145, column: 40, scope: !7)
!32 = !DILocation(line: 146, column: 27, scope: !7)
!33 = !DILocation(line: 133, column: 34, scope: !7)
!34 = !DILocation(line: 133, column: 21, scope: !7)
!35 = !DILocation(line: 134, column: 8, scope: !7)
!36 = !DILocation(line: 135, column: 8, scope: !7)
!37 = !DILocation(line: 136, column: 18, scope: !7)
!38 = !DILocation(line: 137, column: 28, scope: !7)
!39 = !DILocation(line: 137, column: 19, scope: !7)
!40 = !DILocation(line: 138, column: 38, scope: !7)
!41 = !DILocation(line: 138, column: 44, scope: !7)
!42 = !DILocation(line: 138, column: 13, scope: !7)
!43 = !DILocation(line: 145, column: 59, scope: !7)
!44 = !DILocation(line: 145, column: 64, scope: !7)
!45 = !DILocation(line: 146, column: 49, scope: !7)
!46 = !DILocation(line: 146, column: 64, scope: !7)
!47 = !DILocation(line: 146, column: 40, scope: !7)
!48 = !DILocation(line: 146, column: 4, scope: !7)
