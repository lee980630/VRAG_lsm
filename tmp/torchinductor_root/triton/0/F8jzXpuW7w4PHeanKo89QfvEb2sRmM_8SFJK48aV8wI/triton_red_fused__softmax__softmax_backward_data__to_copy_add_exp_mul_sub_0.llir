; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__softmax__softmax_backward_data__to_copy_add_exp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %11 = icmp slt i32 %10, %7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = and i32 %12, 511, !dbg !12
  %16 = or disjoint i32 %15, 512, !dbg !12
  %17 = or disjoint i32 %15, 1024, !dbg !12
  %18 = or disjoint i32 %15, 1536, !dbg !12
  %19 = sext i32 %10 to i64, !dbg !13
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !13
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %11) #4, !dbg !14
  %22 = bitcast i32 %21 to float, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !15
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #4, !dbg !16
  %25 = bitcast i32 %24 to float, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !17
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %11) #4, !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = mul i32 %10, %6, !dbg !19
  %30 = fsub float 0.000000e+00, %22, !dbg !20
  %31 = icmp sgt i32 %8, 0, !dbg !21
  br i1 %31, label %.lr.ph.preheader, label %._crit_edge, !dbg !21

.lr.ph.preheader:                                 ; preds = %9
  %32 = insertelement <4 x i32> poison, i32 %15, i64 0
  %33 = insertelement <4 x i32> %32, i32 %16, i64 1
  %34 = insertelement <4 x i32> %33, i32 %17, i64 2
  %35 = insertelement <4 x i32> %34, i32 %18, i64 3
  %36 = insertelement <4 x i32> poison, i32 %8, i64 0
  %37 = shufflevector <4 x i32> %36, <4 x i32> poison, <4 x i32> zeroinitializer
  %38 = insertelement <4 x i1> poison, i1 %11, i64 0
  %39 = shufflevector <4 x i1> %38, <4 x i1> poison, <4 x i32> zeroinitializer
  %40 = insertelement <4 x float> poison, float %30, i64 0
  %41 = shufflevector <4 x float> %40, <4 x float> poison, <4 x i32> zeroinitializer
  br label %.lr.ph, !dbg !21

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %42 = phi i32 [ %109, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %43 = phi <4 x float> [ %108, %.lr.ph ], [ zeroinitializer, %.lr.ph.preheader ]
  %44 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !22
  %45 = shufflevector <4 x i32> %44, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !22
  %46 = or disjoint <4 x i32> %45, %35, !dbg !22
  %47 = extractelement <4 x i32> %46, i64 0, !dbg !23
  %48 = add i32 %47, %29, !dbg !23
  %49 = extractelement <4 x i32> %46, i64 1, !dbg !23
  %50 = add i32 %49, %29, !dbg !23
  %51 = extractelement <4 x i32> %46, i64 2, !dbg !23
  %52 = add i32 %51, %29, !dbg !23
  %53 = extractelement <4 x i32> %46, i64 3, !dbg !23
  %54 = add i32 %53, %29, !dbg !23
  %55 = sext i32 %48 to i64, !dbg !24
  %56 = getelementptr bfloat, ptr addrspace(1) %1, i64 %55, !dbg !24
  %57 = sext i32 %50 to i64, !dbg !24
  %58 = getelementptr bfloat, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr bfloat, ptr addrspace(1) %1, i64 %59, !dbg !24
  %61 = sext i32 %54 to i64, !dbg !24
  %62 = getelementptr bfloat, ptr addrspace(1) %1, i64 %61, !dbg !24
  %63 = icmp slt <4 x i32> %46, %37, !dbg !25
  %64 = and <4 x i1> %39, %63, !dbg !26
  %65 = extractelement <4 x i1> %64, i64 0, !dbg !27
  %66 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %56, i1 %65, i16 0, i1 %65) #4, !dbg !27
  %67 = bitcast i16 %66 to bfloat, !dbg !27
  %68 = extractelement <4 x i1> %64, i64 1, !dbg !27
  %69 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %58, i1 %68, i16 0, i1 %68) #4, !dbg !27
  %70 = bitcast i16 %69 to bfloat, !dbg !27
  %71 = extractelement <4 x i1> %64, i64 2, !dbg !27
  %72 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %60, i1 %71, i16 0, i1 %71) #4, !dbg !27
  %73 = bitcast i16 %72 to bfloat, !dbg !27
  %74 = extractelement <4 x i1> %64, i64 3, !dbg !27
  %75 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %62, i1 %74, i16 0, i1 %74) #4, !dbg !27
  %76 = bitcast i16 %75 to bfloat, !dbg !27
  %77 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %67) #4, !dbg !28
  %78 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %70) #4, !dbg !28
  %79 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %73) #4, !dbg !28
  %80 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %76) #4, !dbg !28
  %81 = insertelement <4 x float> poison, float %77, i64 0, !dbg !29
  %82 = insertelement <4 x float> %81, float %78, i64 1, !dbg !29
  %83 = insertelement <4 x float> %82, float %79, i64 2, !dbg !29
  %84 = insertelement <4 x float> %83, float %80, i64 3, !dbg !29
  %85 = fmul <4 x float> %41, %84, !dbg !29
  %86 = fsub float %77, %25, !dbg !30
  %87 = fsub float %78, %25, !dbg !30
  %88 = fsub float %79, %25, !dbg !30
  %89 = fsub float %80, %25, !dbg !30
  %90 = fmul float %86, 0x3FF7154760000000, !dbg !31
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #4, !dbg !31
  %92 = fmul float %87, 0x3FF7154760000000, !dbg !31
  %93 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %92) #4, !dbg !31
  %94 = fmul float %88, 0x3FF7154760000000, !dbg !31
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #4, !dbg !31
  %96 = fmul float %89, 0x3FF7154760000000, !dbg !31
  %97 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %96) #4, !dbg !31
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %91, float %28) #4, !dbg !32
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %28) #4, !dbg !32
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %28) #4, !dbg !32
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %28) #4, !dbg !32
  %102 = insertelement <4 x float> poison, float %98, i64 0, !dbg !33
  %103 = insertelement <4 x float> %102, float %99, i64 1, !dbg !33
  %104 = insertelement <4 x float> %103, float %100, i64 2, !dbg !33
  %105 = insertelement <4 x float> %104, float %101, i64 3, !dbg !33
  %106 = fmul <4 x float> %85, %105, !dbg !33
  %107 = fadd <4 x float> %43, %106, !dbg !34
  %108 = select <4 x i1> %64, <4 x float> %107, <4 x float> %43, !dbg !35
  %109 = add i32 %42, 2048, !dbg !21
  %110 = icmp slt i32 %109, %8, !dbg !21
  br i1 %110, label %.lr.ph, label %._crit_edge.loopexit, !dbg !21

._crit_edge.loopexit:                             ; preds = %.lr.ph
  %shift = shufflevector <4 x float> %108, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !36
  %111 = fadd <4 x float> %108, %shift, !dbg !36
  %shift17 = shufflevector <4 x float> %108, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !36
  %112 = fadd <4 x float> %shift17, %111, !dbg !36
  %shift18 = shufflevector <4 x float> %108, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !36
  %113 = fadd <4 x float> %shift18, %112, !dbg !36
  %114 = extractelement <4 x float> %113, i64 0, !dbg !36
  br label %._crit_edge, !dbg !36

._crit_edge:                                      ; preds = %._crit_edge.loopexit, %9
  %115 = phi float [ 0.000000e+00, %9 ], [ %114, %._crit_edge.loopexit ], !dbg !36
  %116 = bitcast float %115 to i32, !dbg !41
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 16, i32 31), !dbg !41
  %118 = bitcast i32 %117 to float, !dbg !41
  %119 = fadd float %115, %118, !dbg !36
  %120 = bitcast float %119 to i32, !dbg !41
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 8, i32 31), !dbg !41
  %122 = bitcast i32 %121 to float, !dbg !41
  %123 = fadd float %119, %122, !dbg !36
  %124 = bitcast float %123 to i32, !dbg !41
  %125 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %124, i32 4, i32 31), !dbg !41
  %126 = bitcast i32 %125 to float, !dbg !41
  %127 = fadd float %123, %126, !dbg !36
  %128 = bitcast float %127 to i32, !dbg !41
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 2, i32 31), !dbg !41
  %130 = bitcast i32 %129 to float, !dbg !41
  %131 = fadd float %127, %130, !dbg !36
  %132 = bitcast float %131 to i32, !dbg !41
  %133 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %132, i32 1, i32 31), !dbg !41
  %134 = bitcast i32 %133 to float, !dbg !41
  %135 = fadd float %131, %134, !dbg !36
  %136 = icmp eq i32 %13, 0, !dbg !41
  %137 = and i32 %14, 15, !dbg !41
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !41
  %139 = bitcast float %135 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 %136) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %140 = icmp slt i32 %12, 16, !dbg !41
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !41
  %142 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %141, i1 %140) #4, !dbg !41
  %143 = bitcast i32 %142 to float, !dbg !41
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 8, i32 31), !dbg !41
  %145 = bitcast i32 %144 to float, !dbg !41
  %146 = fadd float %143, %145, !dbg !36
  %147 = bitcast float %146 to i32, !dbg !41
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 4, i32 31), !dbg !41
  %149 = bitcast i32 %148 to float, !dbg !41
  %150 = fadd float %146, %149, !dbg !36
  %151 = bitcast float %150 to i32, !dbg !41
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !41
  %153 = bitcast i32 %152 to float, !dbg !41
  %154 = fadd float %150, %153, !dbg !36
  %155 = bitcast float %154 to i32, !dbg !41
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !41
  %157 = bitcast i32 %156 to float, !dbg !41
  %158 = fadd float %154, %157, !dbg !36
  %159 = and i32 %12, 15, !dbg !41
  %160 = icmp eq i32 %159, 0, !dbg !41
  %161 = and i1 %140, %160, !dbg !41
  %162 = bitcast float %158 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %162, i1 %161) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %163 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !42
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 %11) #4, !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  br i1 %31, label %.lr.ph10, label %._crit_edge11, !dbg !44

.lr.ph10:                                         ; preds = %._crit_edge, %.lr.ph10
  %167 = phi i32 [ %284, %.lr.ph10 ], [ 0, %._crit_edge ]
  %168 = or disjoint i32 %167, %15, !dbg !45
  %169 = or disjoint i32 %167, %16, !dbg !45
  %170 = or disjoint i32 %167, %17, !dbg !45
  %171 = or disjoint i32 %167, %18, !dbg !45
  %172 = icmp slt i32 %168, %8, !dbg !46
  %173 = icmp slt i32 %169, %8, !dbg !46
  %174 = icmp slt i32 %170, %8, !dbg !46
  %175 = icmp slt i32 %171, %8, !dbg !46
  %176 = add i32 %168, %29, !dbg !47
  %177 = add i32 %169, %29, !dbg !47
  %178 = add i32 %170, %29, !dbg !47
  %179 = add i32 %171, %29, !dbg !47
  %180 = sext i32 %176 to i64, !dbg !48
  %181 = getelementptr bfloat, ptr addrspace(1) %1, i64 %180, !dbg !48
  %182 = sext i32 %177 to i64, !dbg !48
  %183 = getelementptr bfloat, ptr addrspace(1) %1, i64 %182, !dbg !48
  %184 = sext i32 %178 to i64, !dbg !48
  %185 = getelementptr bfloat, ptr addrspace(1) %1, i64 %184, !dbg !48
  %186 = sext i32 %179 to i64, !dbg !48
  %187 = getelementptr bfloat, ptr addrspace(1) %1, i64 %186, !dbg !48
  %188 = and i1 %11, %172, !dbg !49
  %189 = and i1 %11, %173, !dbg !49
  %190 = and i1 %11, %174, !dbg !49
  %191 = and i1 %11, %175, !dbg !49
  %192 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %181, i1 %188, i16 0, i1 %188) #4, !dbg !50
  %193 = bitcast i16 %192 to bfloat, !dbg !50
  %194 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %183, i1 %189, i16 0, i1 %189) #4, !dbg !50
  %195 = bitcast i16 %194 to bfloat, !dbg !50
  %196 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %185, i1 %190, i16 0, i1 %190) #4, !dbg !50
  %197 = bitcast i16 %196 to bfloat, !dbg !50
  %198 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %187, i1 %191, i16 0, i1 %191) #4, !dbg !50
  %199 = bitcast i16 %198 to bfloat, !dbg !50
  %200 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %193) #4, !dbg !51
  %201 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %195) #4, !dbg !51
  %202 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %197) #4, !dbg !51
  %203 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %199) #4, !dbg !51
  %204 = fsub float %200, %25, !dbg !52
  %205 = fsub float %201, %25, !dbg !52
  %206 = fsub float %202, %25, !dbg !52
  %207 = fsub float %203, %25, !dbg !52
  %208 = fmul float %204, 0x3FF7154760000000, !dbg !53
  %209 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %208) #4, !dbg !53
  %210 = fmul float %205, 0x3FF7154760000000, !dbg !53
  %211 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %210) #4, !dbg !53
  %212 = fmul float %206, 0x3FF7154760000000, !dbg !53
  %213 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %212) #4, !dbg !53
  %214 = fmul float %207, 0x3FF7154760000000, !dbg !53
  %215 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %214) #4, !dbg !53
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %28) #4, !dbg !54
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %211, float %28) #4, !dbg !54
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %213, float %28) #4, !dbg !54
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %215, float %28) #4, !dbg !54
  %220 = fmul float %30, %216, !dbg !55
  %221 = fmul float %30, %217, !dbg !55
  %222 = fmul float %30, %218, !dbg !55
  %223 = fmul float %30, %219, !dbg !55
  %224 = fsub float %200, %166, !dbg !56
  %225 = fsub float %201, %166, !dbg !56
  %226 = fsub float %202, %166, !dbg !56
  %227 = fsub float %203, %166, !dbg !56
  %228 = fmul float %224, 0x3FF7154760000000, !dbg !57
  %229 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %228) #4, !dbg !57
  %230 = fmul float %225, 0x3FF7154760000000, !dbg !57
  %231 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %230) #4, !dbg !57
  %232 = fmul float %226, 0x3FF7154760000000, !dbg !57
  %233 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %232) #4, !dbg !57
  %234 = fmul float %227, 0x3FF7154760000000, !dbg !57
  %235 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %234) #4, !dbg !57
  %236 = fmul float %229, %22, !dbg !58
  %237 = fmul float %231, %22, !dbg !58
  %238 = fmul float %233, %22, !dbg !58
  %239 = fmul float %235, %22, !dbg !58
  %240 = fadd float %220, %236, !dbg !59
  %241 = fadd float %221, %237, !dbg !59
  %242 = fadd float %222, %238, !dbg !59
  %243 = fadd float %223, %239, !dbg !59
  %244 = fsub float 0.000000e+00, %216, !dbg !60
  %245 = fsub float 0.000000e+00, %217, !dbg !60
  %246 = fsub float 0.000000e+00, %218, !dbg !60
  %247 = fsub float 0.000000e+00, %219, !dbg !60
  %248 = fmul float %30, %200, !dbg !61
  %249 = fmul float %30, %201, !dbg !61
  %250 = fmul float %30, %202, !dbg !61
  %251 = fmul float %30, %203, !dbg !61
  %252 = fmul float %248, %216, !dbg !62
  %253 = fmul float %249, %217, !dbg !62
  %254 = fmul float %250, %218, !dbg !62
  %255 = fmul float %251, %219, !dbg !62
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i = icmp eq i32 %256, 0, !dbg !63
  %257 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %244, float %163, float %252) #4, !dbg !63
  %258 = tail call float @llvm.nvvm.fma.rn.f(float %244, float %163, float %252) #4, !dbg !63
  %.0.i = select i1 %.not.i, float %258, float %257, !dbg !63
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i3 = icmp eq i32 %259, 0, !dbg !63
  %260 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %245, float %163, float %253) #4, !dbg !63
  %261 = tail call float @llvm.nvvm.fma.rn.f(float %245, float %163, float %253) #4, !dbg !63
  %.0.i4 = select i1 %.not.i3, float %261, float %260, !dbg !63
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i5 = icmp eq i32 %262, 0, !dbg !63
  %263 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %246, float %163, float %254) #4, !dbg !63
  %264 = tail call float @llvm.nvvm.fma.rn.f(float %246, float %163, float %254) #4, !dbg !63
  %.0.i6 = select i1 %.not.i5, float %264, float %263, !dbg !63
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !63
  %.not.i7 = icmp eq i32 %265, 0, !dbg !63
  %266 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %247, float %163, float %255) #4, !dbg !63
  %267 = tail call float @llvm.nvvm.fma.rn.f(float %247, float %163, float %255) #4, !dbg !63
  %.0.i8 = select i1 %.not.i7, float %267, float %266, !dbg !63
  %268 = fadd float %240, %.0.i, !dbg !64
  %269 = fadd float %241, %.0.i4, !dbg !64
  %270 = fadd float %242, %.0.i6, !dbg !64
  %271 = fadd float %243, %.0.i8, !dbg !64
  %272 = getelementptr bfloat, ptr addrspace(1) %5, i64 %180, !dbg !65
  %273 = getelementptr bfloat, ptr addrspace(1) %5, i64 %182, !dbg !65
  %274 = getelementptr bfloat, ptr addrspace(1) %5, i64 %184, !dbg !65
  %275 = getelementptr bfloat, ptr addrspace(1) %5, i64 %186, !dbg !65
  %276 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %268) #4, !dbg !66
  %277 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %269) #4, !dbg !66
  %278 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %270) #4, !dbg !66
  %279 = tail call bfloat asm "cvt.rn.bf16.f32 $0, $1;", "=h,r"(float %271) #4, !dbg !66
  %280 = bitcast bfloat %276 to i16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %280, ptr addrspace(1) %272, i1 %188) #4, !dbg !66
  %281 = bitcast bfloat %277 to i16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %281, ptr addrspace(1) %273, i1 %189) #4, !dbg !66
  %282 = bitcast bfloat %278 to i16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %282, ptr addrspace(1) %274, i1 %190) #4, !dbg !66
  %283 = bitcast bfloat %279 to i16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %283, ptr addrspace(1) %275, i1 %191) #4, !dbg !66
  %284 = add i32 %167, 2048, !dbg !44
  %285 = icmp slt i32 %284, %8, !dbg !44
  br i1 %285, label %.lr.ph10, label %._crit_edge11, !dbg !44

._crit_edge11:                                    ; preds = %.lr.ph10, %._crit_edge
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl6phv4rsflmzoictvylqdbycivqffrcenwe7umneg7erfstf7xg.py", directory: "/root/workspace/VRAG_test/VRAG_lsm/tmp/torchinductor_root/l6")
!4 = !{ptr @triton_red_fused__softmax__softmax_backward_data__to_copy_add_exp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax__softmax_backward_data__to_copy_add_exp_mul_sub_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax__softmax_backward_data__to_copy_add_exp_mul_sub_0", linkageName: "triton_red_fused__softmax__softmax_backward_data__to_copy_add_exp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 25, column: 30, scope: !7)
!14 = !DILocation(line: 25, column: 35, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 34, column: 16, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 27, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 31, column: 25, scope: !7)
!26 = !DILocation(line: 33, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 48, scope: !7)
!28 = !DILocation(line: 33, column: 107, scope: !7)
!29 = !DILocation(line: 36, column: 22, scope: !7)
!30 = !DILocation(line: 37, column: 22, scope: !7)
!31 = !DILocation(line: 38, column: 27, scope: !7)
!32 = !DILocation(line: 39, column: 22, scope: !7)
!33 = !DILocation(line: 40, column: 23, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 43, column: 48, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 44, column: 27, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 45, column: 31, scope: !7)
!43 = !DILocation(line: 45, column: 36, scope: !7)
!44 = !DILocation(line: 46, column: 36, scope: !7)
!45 = !DILocation(line: 47, column: 27, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 40, scope: !7)
!48 = !DILocation(line: 50, column: 35, scope: !7)
!49 = !DILocation(line: 50, column: 57, scope: !7)
!50 = !DILocation(line: 50, column: 49, scope: !7)
!51 = !DILocation(line: 50, column: 109, scope: !7)
!52 = !DILocation(line: 53, column: 24, scope: !7)
!53 = !DILocation(line: 54, column: 28, scope: !7)
!54 = !DILocation(line: 55, column: 24, scope: !7)
!55 = !DILocation(line: 56, column: 24, scope: !7)
!56 = !DILocation(line: 58, column: 24, scope: !7)
!57 = !DILocation(line: 59, column: 28, scope: !7)
!58 = !DILocation(line: 60, column: 23, scope: !7)
!59 = !DILocation(line: 62, column: 24, scope: !7)
!60 = !DILocation(line: 63, column: 17, scope: !7)
!61 = !DILocation(line: 64, column: 24, scope: !7)
!62 = !DILocation(line: 65, column: 24, scope: !7)
!63 = !DILocation(line: 66, column: 44, scope: !7)
!64 = !DILocation(line: 68, column: 24, scope: !7)
!65 = !DILocation(line: 69, column: 29, scope: !7)
!66 = !DILocation(line: 69, column: 50, scope: !7)
!67 = !DILocation(line: 46, column: 4, scope: !7)
