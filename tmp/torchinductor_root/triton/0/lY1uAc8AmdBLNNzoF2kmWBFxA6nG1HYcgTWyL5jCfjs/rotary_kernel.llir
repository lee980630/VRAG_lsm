; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @rotary_kernel(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5, i32 %6, i32 %7, i32 %8, i32 %9, i32 %10, i32 %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !11
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !12
  %18 = shl i32 %16, 3, !dbg !13
  %.not = icmp slt i32 %18, %5, !dbg !14
  br i1 %.not, label %19, label %common.ret, !dbg !14

common.ret:                                       ; preds = %14, %19
  ret void, !dbg !15

19:                                               ; preds = %14
  %20 = mul i32 %17, %8, !dbg !16
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = mul i32 %17, %11, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = shl i32 %15, 1, !dbg !20
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !21
  %28 = lshr i32 %27, 4, !dbg !21
  %.lobit = and i32 %28, 1, !dbg !21
  %29 = or disjoint i32 %26, %.lobit, !dbg !22
  %30 = and i32 %28, 7, !dbg !23
  %.lobit46 = lshr i32 %27, 5, !dbg !23
  %31 = and i32 %.lobit46, 3, !dbg !23
  %32 = or disjoint i32 %18, %30, !dbg !24
  %33 = or disjoint i32 %18, %31, !dbg !24
  %34 = or disjoint i32 %33, 4, !dbg !24
  %35 = add i32 %32, %4, !dbg !25
  %36 = mul i32 %35, 40, !dbg !26
  %37 = shl i32 %27, 2, !dbg !27
  %38 = and i32 %37, 60, !dbg !27
  %39 = add i32 %36, %38, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !30
  %43 = icmp slt i32 %35, %7, !dbg !31
  %44 = icmp samesign ult i32 %38, 40, !dbg !32
  %45 = and i1 %44, %43, !dbg !33
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45, i32 1065353216, i1 %45) #2, !dbg !34
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !34
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !34
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !34
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !34
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #2, !dbg !35
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !35
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !35
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !35
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !35
  %56 = bitcast i32 %52 to float, !dbg !35
  %57 = bitcast i32 %53 to float, !dbg !35
  %58 = bitcast i32 %54 to float, !dbg !35
  %59 = bitcast i32 %55 to float, !dbg !35
  %60 = fsub float 0.000000e+00, %56, !dbg !36
  %61 = fsub float 0.000000e+00, %57, !dbg !36
  %62 = fsub float 0.000000e+00, %58, !dbg !36
  %63 = fsub float 0.000000e+00, %59, !dbg !36
  %64 = mul i32 %29, %13, !dbg !37
  %65 = mul i32 %33, %12, !dbg !38
  %66 = mul i32 %34, %12, !dbg !38
  %67 = add i32 %64, %38, !dbg !39
  %68 = add i32 %67, %65, !dbg !40
  %69 = add i32 %67, %66, !dbg !40
  %70 = sext i32 %68 to i64, !dbg !41
  %71 = getelementptr float, ptr addrspace(1) %25, i64 %70, !dbg !41
  %72 = sext i32 %69 to i64, !dbg !41
  %73 = getelementptr float, ptr addrspace(1) %25, i64 %72, !dbg !41
  %74 = mul i32 %29, %10, !dbg !42
  %75 = mul i32 %33, %9, !dbg !43
  %76 = mul i32 %34, %9, !dbg !43
  %77 = add i32 %74, %38, !dbg !44
  %78 = add i32 %77, %75, !dbg !45
  %79 = add i32 %77, %76, !dbg !45
  %80 = sext i32 %78 to i64, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %22, i64 %80, !dbg !46
  %82 = sext i32 %79 to i64, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %22, i64 %82, !dbg !46
  %84 = icmp slt i32 %29, %6, !dbg !47
  %85 = icmp slt i32 %33, %5, !dbg !48
  %86 = icmp slt i32 %34, %5, !dbg !48
  %87 = and i1 %84, %85, !dbg !49
  %88 = and i1 %84, %86, !dbg !49
  %89 = and i1 %44, %87, !dbg !50
  %90 = and i1 %44, %88, !dbg !50
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %71, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #2, !dbg !51
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !51
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !51
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !51
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !51
  %96 = bitcast i32 %92 to float, !dbg !51
  %97 = bitcast i32 %93 to float, !dbg !51
  %98 = bitcast i32 %94 to float, !dbg !51
  %99 = bitcast i32 %95 to float, !dbg !51
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #2, !dbg !51
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !51
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !51
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !51
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !51
  %105 = bitcast i32 %101 to float, !dbg !51
  %106 = bitcast i32 %102 to float, !dbg !51
  %107 = bitcast i32 %103 to float, !dbg !51
  %108 = bitcast i32 %104 to float, !dbg !51
  %109 = getelementptr i8, ptr addrspace(1) %71, i64 160, !dbg !52
  %110 = getelementptr i8, ptr addrspace(1) %73, i64 160, !dbg !52
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #2, !dbg !53
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !53
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !53
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !53
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !53
  %116 = bitcast i32 %112 to float, !dbg !53
  %117 = bitcast i32 %113 to float, !dbg !53
  %118 = bitcast i32 %114 to float, !dbg !53
  %119 = bitcast i32 %115 to float, !dbg !53
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #2, !dbg !53
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !53
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !53
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !53
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !53
  %125 = bitcast i32 %121 to float, !dbg !53
  %126 = bitcast i32 %122 to float, !dbg !53
  %127 = bitcast i32 %123 to float, !dbg !53
  %128 = bitcast i32 %124 to float, !dbg !53
  %129 = and i32 %37, 508, !dbg !54
  %130 = shl i32 %27, 1, !dbg !54
  %131 = and i32 %130, 192, !dbg !54
  %132 = or disjoint i32 %131, %38, !dbg !54
  %133 = and i32 %27, 112, !dbg !54
  %134 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %133, !dbg !54
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %129, !dbg !54
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %135, i32 %47, i32 %48, i32 %49, i32 %50, i1 true) #2, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %136 = lshr exact i32 %131, 2, !dbg !54
  %137 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !54
  %138 = getelementptr inbounds float, ptr addrspace(3) %137, i32 %132, !dbg !54
  %139 = load float, ptr addrspace(3) %138, align 16, !dbg !54
  %140 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 4, !dbg !54
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !54
  %142 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 8, !dbg !54
  %143 = load float, ptr addrspace(3) %142, align 8, !dbg !54
  %144 = getelementptr inbounds i8, ptr addrspace(3) %138, i32 12, !dbg !54
  %145 = load float, ptr addrspace(3) %144, align 4, !dbg !54
  %146 = or disjoint i32 %132, 256, !dbg !54
  %147 = lshr i32 %146, 4, !dbg !54
  %148 = and i32 %147, 28, !dbg !54
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !54
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %146, !dbg !54
  %151 = load float, ptr addrspace(3) %150, align 16, !dbg !54
  %152 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 4, !dbg !54
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !54
  %154 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 8, !dbg !54
  %155 = load float, ptr addrspace(3) %154, align 8, !dbg !54
  %156 = getelementptr inbounds i8, ptr addrspace(3) %150, i32 12, !dbg !54
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !54
  %158 = fmul float %139, %96, !dbg !54
  %159 = fmul float %141, %97, !dbg !54
  %160 = fmul float %143, %98, !dbg !54
  %161 = fmul float %145, %99, !dbg !54
  %162 = fmul float %151, %105, !dbg !54
  %163 = fmul float %153, %106, !dbg !54
  %164 = fmul float %155, %107, !dbg !54
  %165 = fmul float %157, %108, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %166 = bitcast float %60 to i32, !dbg !55
  %167 = bitcast float %61 to i32, !dbg !55
  %168 = bitcast float %62 to i32, !dbg !55
  %169 = bitcast float %63 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %135, i32 %166, i32 %167, i32 %168, i32 %169, i1 true) #2, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %170 = load float, ptr addrspace(3) %138, align 16, !dbg !55
  %171 = load float, ptr addrspace(3) %140, align 4, !dbg !55
  %172 = load float, ptr addrspace(3) %142, align 8, !dbg !55
  %173 = load float, ptr addrspace(3) %144, align 4, !dbg !55
  %174 = load float, ptr addrspace(3) %150, align 16, !dbg !55
  %175 = load float, ptr addrspace(3) %152, align 4, !dbg !55
  %176 = load float, ptr addrspace(3) %154, align 8, !dbg !55
  %177 = load float, ptr addrspace(3) %156, align 4, !dbg !55
  %178 = fmul float %170, %116, !dbg !55
  %179 = fmul float %171, %117, !dbg !55
  %180 = fmul float %172, %118, !dbg !55
  %181 = fmul float %173, %119, !dbg !55
  %182 = fmul float %174, %125, !dbg !55
  %183 = fmul float %175, %126, !dbg !55
  %184 = fmul float %176, %127, !dbg !55
  %185 = fmul float %177, %128, !dbg !55
  %186 = fsub float %158, %178, !dbg !56
  %187 = fsub float %159, %179, !dbg !56
  %188 = fsub float %160, %180, !dbg !56
  %189 = fsub float %161, %181, !dbg !56
  %190 = fsub float %162, %182, !dbg !56
  %191 = fsub float %163, %183, !dbg !56
  %192 = fsub float %164, %184, !dbg !56
  %193 = fsub float %165, %185, !dbg !56
  %194 = fmul float %170, %96, !dbg !57
  %195 = fmul float %171, %97, !dbg !57
  %196 = fmul float %172, %98, !dbg !57
  %197 = fmul float %173, %99, !dbg !57
  %198 = fmul float %174, %105, !dbg !57
  %199 = fmul float %175, %106, !dbg !57
  %200 = fmul float %176, %107, !dbg !57
  %201 = fmul float %177, %108, !dbg !57
  %202 = fmul float %139, %116, !dbg !58
  %203 = fmul float %141, %117, !dbg !58
  %204 = fmul float %143, %118, !dbg !58
  %205 = fmul float %145, %119, !dbg !58
  %206 = fmul float %151, %125, !dbg !58
  %207 = fmul float %153, %126, !dbg !58
  %208 = fmul float %155, %127, !dbg !58
  %209 = fmul float %157, %128, !dbg !58
  %210 = fadd float %202, %194, !dbg !59
  %211 = fadd float %203, %195, !dbg !59
  %212 = fadd float %204, %196, !dbg !59
  %213 = fadd float %205, %197, !dbg !59
  %214 = fadd float %206, %198, !dbg !59
  %215 = fadd float %207, %199, !dbg !59
  %216 = fadd float %208, %200, !dbg !59
  %217 = fadd float %209, %201, !dbg !59
  %218 = bitcast float %186 to i32, !dbg !60
  %219 = bitcast float %187 to i32, !dbg !60
  %220 = bitcast float %188 to i32, !dbg !60
  %221 = bitcast float %189 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %218, i32 %219, i32 %220, i32 %221, ptr addrspace(1) %81, i1 %89) #2, !dbg !60
  %222 = bitcast float %190 to i32, !dbg !60
  %223 = bitcast float %191 to i32, !dbg !60
  %224 = bitcast float %192 to i32, !dbg !60
  %225 = bitcast float %193 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %222, i32 %223, i32 %224, i32 %225, ptr addrspace(1) %83, i1 %90) #2, !dbg !60
  %226 = getelementptr i8, ptr addrspace(1) %81, i64 160, !dbg !61
  %227 = getelementptr i8, ptr addrspace(1) %83, i64 160, !dbg !61
  %228 = bitcast float %210 to i32, !dbg !62
  %229 = bitcast float %211 to i32, !dbg !62
  %230 = bitcast float %212 to i32, !dbg !62
  %231 = bitcast float %213 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %229, i32 %230, i32 %231, ptr addrspace(1) %226, i1 %89) #2, !dbg !62
  %232 = bitcast float %214 to i32, !dbg !62
  %233 = bitcast float %215 to i32, !dbg !62
  %234 = bitcast float %216 to i32, !dbg !62
  %235 = bitcast float %217 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %232, i32 %233, i32 %234, i32 %235, ptr addrspace(1) %227, i1 %90) #2, !dbg !62
  br label %common.ret, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "rotary.py", directory: "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/flash_attn/ops/triton")
!4 = !{ptr @rotary_kernel, !"kernel", i32 1}
!5 = !{ptr @rotary_kernel, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "rotary_kernel", linkageName: "rotary_kernel", scope: !3, file: !3, line: 13, type: !8, scopeLine: 13, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 46, column: 29, scope: !7)
!11 = !DILocation(line: 47, column: 26, scope: !7)
!12 = !DILocation(line: 48, column: 30, scope: !7)
!13 = !DILocation(line: 59, column: 15, scope: !7)
!14 = !DILocation(line: 59, column: 26, scope: !7)
!15 = !DILocation(line: 0, scope: !7)
!16 = !DILocation(line: 52, column: 32, scope: !7)
!17 = !DILocation(line: 52, column: 20, scope: !7)
!18 = !DILocation(line: 51, column: 28, scope: !7)
!19 = !DILocation(line: 51, column: 16, scope: !7)
!20 = !DILocation(line: 62, column: 20, scope: !7)
!21 = !DILocation(line: 62, column: 43, scope: !7)
!22 = !DILocation(line: 62, column: 30, scope: !7)
!23 = !DILocation(line: 63, column: 40, scope: !7)
!24 = !DILocation(line: 63, column: 27, scope: !7)
!25 = !DILocation(line: 65, column: 21, scope: !7)
!26 = !DILocation(line: 70, column: 34, scope: !7)
!27 = !DILocation(line: 70, column: 60, scope: !7)
!28 = !DILocation(line: 70, column: 52, scope: !7)
!29 = !DILocation(line: 70, column: 17, scope: !7)
!30 = !DILocation(line: 71, column: 17, scope: !7)
!31 = !DILocation(line: 72, column: 32, scope: !7)
!32 = !DILocation(line: 72, column: 65, scope: !7)
!33 = !DILocation(line: 72, column: 46, scope: !7)
!34 = !DILocation(line: 73, column: 18, scope: !7)
!35 = !DILocation(line: 74, column: 18, scope: !7)
!36 = !DILocation(line: 76, column: 15, scope: !7)
!37 = !DILocation(line: 80, column: 37, scope: !7)
!38 = !DILocation(line: 80, column: 75, scope: !7)
!39 = !DILocation(line: 80, column: 55, scope: !7)
!40 = !DILocation(line: 80, column: 93, scope: !7)
!41 = !DILocation(line: 80, column: 17, scope: !7)
!42 = !DILocation(line: 81, column: 41, scope: !7)
!43 = !DILocation(line: 81, column: 81, scope: !7)
!44 = !DILocation(line: 81, column: 61, scope: !7)
!45 = !DILocation(line: 81, column: 101, scope: !7)
!46 = !DILocation(line: 81, column: 21, scope: !7)
!47 = !DILocation(line: 82, column: 36, scope: !7)
!48 = !DILocation(line: 82, column: 67, scope: !7)
!49 = !DILocation(line: 82, column: 47, scope: !7)
!50 = !DILocation(line: 82, column: 78, scope: !7)
!51 = !DILocation(line: 83, column: 21, scope: !7)
!52 = !DILocation(line: 84, column: 25, scope: !7)
!53 = !DILocation(line: 84, column: 21, scope: !7)
!54 = !DILocation(line: 85, column: 18, scope: !7)
!55 = !DILocation(line: 85, column: 29, scope: !7)
!56 = !DILocation(line: 85, column: 24, scope: !7)
!57 = !DILocation(line: 86, column: 18, scope: !7)
!58 = !DILocation(line: 86, column: 29, scope: !7)
!59 = !DILocation(line: 86, column: 24, scope: !7)
!60 = !DILocation(line: 87, column: 22, scope: !7)
!61 = !DILocation(line: 88, column: 23, scope: !7)
!62 = !DILocation(line: 88, column: 61, scope: !7)
!63 = !DILocation(line: 78, column: 4, scope: !7)
