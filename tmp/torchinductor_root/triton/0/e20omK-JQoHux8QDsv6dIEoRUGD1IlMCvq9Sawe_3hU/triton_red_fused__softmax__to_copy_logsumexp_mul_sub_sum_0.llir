; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__softmax__to_copy_logsumexp_mul_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, %6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %11, 511, !dbg !12
  %15 = or disjoint i32 %14, 512, !dbg !12
  %16 = or disjoint i32 %14, 1024, !dbg !12
  %17 = or disjoint i32 %14, 1536, !dbg !12
  %18 = mul i32 %9, %5, !dbg !13
  %19 = icmp sgt i32 %7, 0, !dbg !14
  br i1 %19, label %.lr.ph.preheader, label %._crit_edge, !dbg !14

.lr.ph.preheader:                                 ; preds = %8
  %20 = insertelement <4 x i32> poison, i32 %15, i64 0
  %21 = insertelement <4 x i32> %20, i32 %16, i64 1
  %22 = insertelement <4 x i32> %21, i32 %17, i64 2
  %23 = insertelement <4 x i32> %22, i32 %14, i64 3
  %24 = insertelement <4 x i32> poison, i32 %7, i64 0
  %25 = shufflevector <4 x i32> %24, <4 x i32> poison, <4 x i32> zeroinitializer
  %26 = insertelement <4 x i1> poison, i1 %10, i64 0
  %27 = shufflevector <4 x i1> %26, <4 x i1> poison, <4 x i32> zeroinitializer
  br label %.lr.ph, !dbg !14

.lr.ph:                                           ; preds = %.lr.ph.preheader, %.lr.ph
  %28 = phi i32 [ %76, %.lr.ph ], [ 0, %.lr.ph.preheader ]
  %29 = phi <4 x float> [ %75, %.lr.ph ], [ splat (float 0xFFF0000000000000), %.lr.ph.preheader ]
  %30 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !15
  %31 = shufflevector <4 x i32> %30, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !15
  %32 = or disjoint <4 x i32> %31, %23, !dbg !15
  %33 = extractelement <4 x i32> %32, i64 3, !dbg !16
  %34 = add i32 %33, %18, !dbg !16
  %35 = extractelement <4 x i32> %32, i64 0, !dbg !16
  %36 = add i32 %35, %18, !dbg !16
  %37 = extractelement <4 x i32> %32, i64 1, !dbg !16
  %38 = add i32 %37, %18, !dbg !16
  %39 = extractelement <4 x i32> %32, i64 2, !dbg !16
  %40 = add i32 %39, %18, !dbg !16
  %41 = sext i32 %34 to i64, !dbg !17
  %42 = getelementptr bfloat, ptr addrspace(1) %1, i64 %41, !dbg !17
  %43 = sext i32 %36 to i64, !dbg !17
  %44 = getelementptr bfloat, ptr addrspace(1) %1, i64 %43, !dbg !17
  %45 = sext i32 %38 to i64, !dbg !17
  %46 = getelementptr bfloat, ptr addrspace(1) %1, i64 %45, !dbg !17
  %47 = sext i32 %40 to i64, !dbg !17
  %48 = getelementptr bfloat, ptr addrspace(1) %1, i64 %47, !dbg !17
  %49 = fcmp uno <4 x float> %29, zeroinitializer, !dbg !18
  %50 = icmp slt <4 x i32> %32, %25, !dbg !22
  %51 = and <4 x i1> %27, %50, !dbg !23
  %52 = extractelement <4 x i1> %51, i64 3, !dbg !24
  %53 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %42, i1 %52, i16 0, i1 %52) #4, !dbg !24
  %54 = bitcast i16 %53 to bfloat, !dbg !24
  %55 = extractelement <4 x i1> %51, i64 0, !dbg !24
  %56 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %44, i1 %55, i16 0, i1 %55) #4, !dbg !24
  %57 = bitcast i16 %56 to bfloat, !dbg !24
  %58 = extractelement <4 x i1> %51, i64 1, !dbg !24
  %59 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %46, i1 %58, i16 0, i1 %58) #4, !dbg !24
  %60 = bitcast i16 %59 to bfloat, !dbg !24
  %61 = extractelement <4 x i1> %51, i64 2, !dbg !24
  %62 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %48, i1 %61, i16 0, i1 %61) #4, !dbg !24
  %63 = bitcast i16 %62 to bfloat, !dbg !24
  %64 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %54) #4, !dbg !25
  %65 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %57) #4, !dbg !25
  %66 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %60) #4, !dbg !25
  %67 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %63) #4, !dbg !25
  %68 = insertelement <4 x float> poison, float %65, i64 0, !dbg !26
  %69 = insertelement <4 x float> %68, float %66, i64 1, !dbg !26
  %70 = insertelement <4 x float> %69, float %67, i64 2, !dbg !26
  %71 = insertelement <4 x float> %70, float %64, i64 3, !dbg !26
  %72 = fcmp ogt <4 x float> %29, %71, !dbg !26
  %73 = or <4 x i1> %49, %72, !dbg !27
  %74 = select <4 x i1> %73, <4 x float> %29, <4 x float> %71, !dbg !28
  %75 = select <4 x i1> %51, <4 x float> %74, <4 x float> %29, !dbg !29
  %76 = add i32 %28, 2048, !dbg !14
  %77 = icmp slt i32 %76, %7, !dbg !14
  br i1 %77, label %.lr.ph, label %._crit_edge, !dbg !14

._crit_edge:                                      ; preds = %.lr.ph, %8
  %78 = phi <4 x float> [ splat (float 0xFFF0000000000000), %8 ], [ %75, %.lr.ph ], !dbg !30
  %79 = extractelement <4 x float> %78, i64 0, !dbg !31
  %80 = extractelement <4 x float> %78, i64 3, !dbg !31
  %81 = fcmp ogt float %80, %79, !dbg !31
  %82 = fcmp uno float %80, 0.000000e+00, !dbg !34
  %83 = or i1 %81, %82, !dbg !35
  %84 = select i1 %83, float %80, float %79, !dbg !36
  %85 = extractelement <4 x float> %78, i64 1, !dbg !31
  %86 = fcmp ogt float %84, %85, !dbg !31
  %87 = fcmp uno float %84, 0.000000e+00, !dbg !34
  %88 = or i1 %86, %87, !dbg !35
  %89 = select i1 %88, float %84, float %85, !dbg !36
  %90 = extractelement <4 x float> %78, i64 2, !dbg !31
  %91 = fcmp ogt float %89, %90, !dbg !31
  %92 = fcmp uno float %89, 0.000000e+00, !dbg !34
  %93 = or i1 %91, %92, !dbg !35
  %94 = select i1 %93, float %89, float %90, !dbg !36
  %95 = bitcast float %94 to i32, !dbg !37
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !37
  %97 = bitcast i32 %96 to float, !dbg !37
  %98 = fcmp ogt float %94, %97, !dbg !31
  %99 = fcmp uno float %94, 0.000000e+00, !dbg !34
  %100 = or i1 %99, %98, !dbg !35
  %101 = select i1 %100, float %94, float %97, !dbg !36
  %102 = bitcast float %101 to i32, !dbg !37
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 8, i32 31), !dbg !37
  %104 = bitcast i32 %103 to float, !dbg !37
  %105 = fcmp ogt float %101, %104, !dbg !31
  %106 = fcmp uno float %101, 0.000000e+00, !dbg !34
  %107 = or i1 %105, %106, !dbg !35
  %108 = select i1 %107, float %101, float %104, !dbg !36
  %109 = bitcast float %108 to i32, !dbg !37
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 4, i32 31), !dbg !37
  %111 = bitcast i32 %110 to float, !dbg !37
  %112 = fcmp ogt float %108, %111, !dbg !31
  %113 = fcmp uno float %108, 0.000000e+00, !dbg !34
  %114 = or i1 %112, %113, !dbg !35
  %115 = select i1 %114, float %108, float %111, !dbg !36
  %116 = bitcast float %115 to i32, !dbg !37
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 2, i32 31), !dbg !37
  %118 = bitcast i32 %117 to float, !dbg !37
  %119 = fcmp ogt float %115, %118, !dbg !31
  %120 = fcmp uno float %115, 0.000000e+00, !dbg !34
  %121 = or i1 %119, %120, !dbg !35
  %122 = select i1 %121, float %115, float %118, !dbg !36
  %123 = bitcast float %122 to i32, !dbg !37
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 1, i32 31), !dbg !37
  %125 = bitcast i32 %124 to float, !dbg !37
  %126 = fcmp ogt float %122, %125, !dbg !31
  %127 = fcmp uno float %122, 0.000000e+00, !dbg !34
  %128 = or i1 %126, %127, !dbg !35
  %129 = icmp eq i32 %12, 0, !dbg !37
  %130 = and i32 %13, 15, !dbg !37
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !37
  %132 = select i1 %128, i32 %123, i32 %124, !dbg !36
  %133 = insertelement <1 x i32> poison, i32 %132, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %133, i1 %129) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %134 = icmp slt i32 %11, 16, !dbg !37
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %136 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 8, i32 31), !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = fcmp ogt float %137, %139, !dbg !31
  %141 = fcmp uno float %137, 0.000000e+00, !dbg !34
  %142 = or i1 %141, %140, !dbg !35
  %143 = select i1 %142, float %137, float %139, !dbg !36
  %144 = bitcast float %143 to i32, !dbg !37
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !37
  %146 = bitcast i32 %145 to float, !dbg !37
  %147 = fcmp ogt float %143, %146, !dbg !31
  %148 = fcmp uno float %143, 0.000000e+00, !dbg !34
  %149 = or i1 %147, %148, !dbg !35
  %150 = select i1 %149, float %143, float %146, !dbg !36
  %151 = bitcast float %150 to i32, !dbg !37
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 2, i32 31), !dbg !37
  %153 = bitcast i32 %152 to float, !dbg !37
  %154 = fcmp ogt float %150, %153, !dbg !31
  %155 = fcmp uno float %150, 0.000000e+00, !dbg !34
  %156 = or i1 %154, %155, !dbg !35
  %157 = select i1 %156, float %150, float %153, !dbg !36
  %158 = bitcast float %157 to i32, !dbg !37
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 1, i32 31), !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = fcmp ogt float %157, %160, !dbg !31
  %162 = fcmp uno float %157, 0.000000e+00, !dbg !34
  %163 = or i1 %161, %162, !dbg !35
  %164 = and i32 %11, 15, !dbg !37
  %165 = icmp eq i32 %164, 0, !dbg !37
  %166 = and i1 %134, %165, !dbg !37
  %167 = select i1 %163, i32 %158, i32 %159, !dbg !36
  %168 = insertelement <1 x i32> poison, i32 %167, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %168, i1 %166) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %169 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !37
  %170 = sext i32 %9 to i64, !dbg !38
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !38
  %172 = icmp eq i32 %14, 0, !dbg !39
  %173 = bitcast float %169 to i32, !dbg !39
  %174 = and i1 %172, %10, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %171, i1 %174) #4, !dbg !39
  br i1 %19, label %.lr.ph8, label %._crit_edge9, !dbg !40

.lr.ph8:                                          ; preds = %._crit_edge, %.lr.ph8
  %175 = phi float [ %232, %.lr.ph8 ], [ 0.000000e+00, %._crit_edge ]
  %176 = phi float [ %233, %.lr.ph8 ], [ 0.000000e+00, %._crit_edge ]
  %177 = phi float [ %234, %.lr.ph8 ], [ 0.000000e+00, %._crit_edge ]
  %178 = phi float [ %235, %.lr.ph8 ], [ 0.000000e+00, %._crit_edge ]
  %179 = phi i32 [ %236, %.lr.ph8 ], [ 0, %._crit_edge ]
  %180 = or disjoint i32 %179, %14, !dbg !41
  %181 = or disjoint i32 %179, %15, !dbg !41
  %182 = or disjoint i32 %179, %16, !dbg !41
  %183 = or disjoint i32 %179, %17, !dbg !41
  %184 = icmp slt i32 %180, %7, !dbg !42
  %185 = icmp slt i32 %181, %7, !dbg !42
  %186 = icmp slt i32 %182, %7, !dbg !42
  %187 = icmp slt i32 %183, %7, !dbg !42
  %188 = add i32 %180, %18, !dbg !43
  %189 = add i32 %181, %18, !dbg !43
  %190 = add i32 %182, %18, !dbg !43
  %191 = add i32 %183, %18, !dbg !43
  %192 = sext i32 %188 to i64, !dbg !44
  %193 = getelementptr bfloat, ptr addrspace(1) %1, i64 %192, !dbg !44
  %194 = sext i32 %189 to i64, !dbg !44
  %195 = getelementptr bfloat, ptr addrspace(1) %1, i64 %194, !dbg !44
  %196 = sext i32 %190 to i64, !dbg !44
  %197 = getelementptr bfloat, ptr addrspace(1) %1, i64 %196, !dbg !44
  %198 = sext i32 %191 to i64, !dbg !44
  %199 = getelementptr bfloat, ptr addrspace(1) %1, i64 %198, !dbg !44
  %200 = and i1 %10, %184, !dbg !45
  %201 = and i1 %10, %185, !dbg !45
  %202 = and i1 %10, %186, !dbg !45
  %203 = and i1 %10, %187, !dbg !45
  %204 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %193, i1 %200, i16 0, i1 %200) #4, !dbg !46
  %205 = bitcast i16 %204 to bfloat, !dbg !46
  %206 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %195, i1 %201, i16 0, i1 %201) #4, !dbg !46
  %207 = bitcast i16 %206 to bfloat, !dbg !46
  %208 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %197, i1 %202, i16 0, i1 %202) #4, !dbg !46
  %209 = bitcast i16 %208 to bfloat, !dbg !46
  %210 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %199, i1 %203, i16 0, i1 %203) #4, !dbg !46
  %211 = bitcast i16 %210 to bfloat, !dbg !46
  %212 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %205) #4, !dbg !47
  %213 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %207) #4, !dbg !47
  %214 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %209) #4, !dbg !47
  %215 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %211) #4, !dbg !47
  %216 = fsub float %212, %169, !dbg !48
  %217 = fsub float %213, %169, !dbg !48
  %218 = fsub float %214, %169, !dbg !48
  %219 = fsub float %215, %169, !dbg !48
  %220 = fmul float %216, 0x3FF7154760000000, !dbg !49
  %221 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %220) #4, !dbg !49
  %222 = fmul float %217, 0x3FF7154760000000, !dbg !49
  %223 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %222) #4, !dbg !49
  %224 = fmul float %218, 0x3FF7154760000000, !dbg !49
  %225 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %224) #4, !dbg !49
  %226 = fmul float %219, 0x3FF7154760000000, !dbg !49
  %227 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %226) #4, !dbg !49
  %228 = fadd float %175, %221, !dbg !50
  %229 = fadd float %176, %223, !dbg !50
  %230 = fadd float %177, %225, !dbg !50
  %231 = fadd float %178, %227, !dbg !50
  %232 = select i1 %200, float %228, float %175, !dbg !51
  %233 = select i1 %201, float %229, float %176, !dbg !51
  %234 = select i1 %202, float %230, float %177, !dbg !51
  %235 = select i1 %203, float %231, float %178, !dbg !51
  %236 = add i32 %179, 2048, !dbg !40
  %237 = icmp slt i32 %236, %7, !dbg !40
  br i1 %237, label %.lr.ph8, label %._crit_edge9, !dbg !40

._crit_edge9:                                     ; preds = %.lr.ph8, %._crit_edge
  %238 = phi float [ 0.000000e+00, %._crit_edge ], [ %232, %.lr.ph8 ], !dbg !52
  %239 = phi float [ 0.000000e+00, %._crit_edge ], [ %233, %.lr.ph8 ], !dbg !52
  %240 = phi float [ 0.000000e+00, %._crit_edge ], [ %234, %.lr.ph8 ], !dbg !52
  %241 = phi float [ 0.000000e+00, %._crit_edge ], [ %235, %.lr.ph8 ], !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %242 = fadd float %238, %239, !dbg !57
  %243 = fadd float %240, %242, !dbg !57
  %244 = fadd float %241, %243, !dbg !57
  %245 = bitcast float %244 to i32, !dbg !53
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 16, i32 31), !dbg !53
  %247 = bitcast i32 %246 to float, !dbg !53
  %248 = fadd float %244, %247, !dbg !57
  %249 = bitcast float %248 to i32, !dbg !53
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 8, i32 31), !dbg !53
  %251 = bitcast i32 %250 to float, !dbg !53
  %252 = fadd float %248, %251, !dbg !57
  %253 = bitcast float %252 to i32, !dbg !53
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 4, i32 31), !dbg !53
  %255 = bitcast i32 %254 to float, !dbg !53
  %256 = fadd float %252, %255, !dbg !57
  %257 = bitcast float %256 to i32, !dbg !53
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 2, i32 31), !dbg !53
  %259 = bitcast i32 %258 to float, !dbg !53
  %260 = fadd float %256, %259, !dbg !57
  %261 = bitcast float %260 to i32, !dbg !53
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !53
  %263 = bitcast i32 %262 to float, !dbg !53
  %264 = fadd float %260, %263, !dbg !57
  %265 = bitcast float %264 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %265, i1 %129) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %266 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !53
  %267 = bitcast i32 %266 to float, !dbg !53
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !53
  %269 = bitcast i32 %268 to float, !dbg !53
  %270 = fadd float %267, %269, !dbg !57
  %271 = bitcast float %270 to i32, !dbg !53
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !53
  %273 = bitcast i32 %272 to float, !dbg !53
  %274 = fadd float %270, %273, !dbg !57
  %275 = bitcast float %274 to i32, !dbg !53
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !53
  %277 = bitcast i32 %276 to float, !dbg !53
  %278 = fadd float %274, %277, !dbg !57
  %279 = bitcast float %278 to i32, !dbg !53
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !53
  %281 = bitcast i32 %280 to float, !dbg !53
  %282 = fadd float %278, %281, !dbg !57
  %283 = bitcast float %282 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %283, i1 %166) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %284 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %170, !dbg !59
  %286 = bitcast float %284 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %285, i1 %174) #4, !dbg !60
  %287 = tail call float @llvm.fabs.f32(float %169), !dbg !61
  %288 = fcmp oeq float %287, 0x7FF0000000000000, !dbg !62
  %289 = select i1 %288, float 0.000000e+00, float %169, !dbg !63
  br i1 %19, label %.lr.ph12.preheader, label %._crit_edge13, !dbg !64

.lr.ph12.preheader:                               ; preds = %._crit_edge9
  %290 = insertelement <4 x i32> poison, i32 %14, i64 0
  %291 = insertelement <4 x i32> %290, i32 %15, i64 1
  %292 = insertelement <4 x i32> %291, i32 %16, i64 2
  %293 = insertelement <4 x i32> %292, i32 %17, i64 3
  %294 = insertelement <4 x i32> poison, i32 %7, i64 0
  %295 = shufflevector <4 x i32> %294, <4 x i32> poison, <4 x i32> zeroinitializer
  %296 = insertelement <4 x i1> poison, i1 %10, i64 0
  %297 = shufflevector <4 x i1> %296, <4 x i1> poison, <4 x i32> zeroinitializer
  br label %.lr.ph12, !dbg !64

.lr.ph12:                                         ; preds = %.lr.ph12.preheader, %.lr.ph12
  %298 = phi i32 [ %383, %.lr.ph12 ], [ 0, %.lr.ph12.preheader ]
  %299 = phi <8 x float> [ %382, %.lr.ph12 ], [ zeroinitializer, %.lr.ph12.preheader ]
  %300 = insertelement <4 x i32> poison, i32 %298, i64 0, !dbg !65
  %301 = shufflevector <4 x i32> %300, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !65
  %302 = or disjoint <4 x i32> %301, %293, !dbg !65
  %303 = extractelement <4 x i32> %302, i64 0, !dbg !66
  %304 = add i32 %303, %18, !dbg !66
  %305 = extractelement <4 x i32> %302, i64 1, !dbg !66
  %306 = add i32 %305, %18, !dbg !66
  %307 = extractelement <4 x i32> %302, i64 2, !dbg !66
  %308 = add i32 %307, %18, !dbg !66
  %309 = extractelement <4 x i32> %302, i64 3, !dbg !66
  %310 = add i32 %309, %18, !dbg !66
  %311 = sext i32 %304 to i64, !dbg !67
  %312 = getelementptr bfloat, ptr addrspace(1) %1, i64 %311, !dbg !67
  %313 = sext i32 %306 to i64, !dbg !67
  %314 = getelementptr bfloat, ptr addrspace(1) %1, i64 %313, !dbg !67
  %315 = sext i32 %308 to i64, !dbg !67
  %316 = getelementptr bfloat, ptr addrspace(1) %1, i64 %315, !dbg !67
  %317 = sext i32 %310 to i64, !dbg !67
  %318 = getelementptr bfloat, ptr addrspace(1) %1, i64 %317, !dbg !67
  %319 = icmp slt <4 x i32> %302, %295, !dbg !68
  %320 = and <4 x i1> %297, %319, !dbg !69
  %321 = shufflevector <4 x i1> %320, <4 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !69
  %322 = extractelement <4 x i1> %320, i64 0, !dbg !70
  %323 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %312, i1 %322, i16 0, i1 %322) #4, !dbg !70
  %324 = bitcast i16 %323 to bfloat, !dbg !70
  %325 = extractelement <4 x i1> %320, i64 1, !dbg !70
  %326 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %314, i1 %325, i16 0, i1 %325) #4, !dbg !70
  %327 = bitcast i16 %326 to bfloat, !dbg !70
  %328 = extractelement <4 x i1> %320, i64 2, !dbg !70
  %329 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %316, i1 %328, i16 0, i1 %328) #4, !dbg !70
  %330 = bitcast i16 %329 to bfloat, !dbg !70
  %331 = extractelement <4 x i1> %320, i64 3, !dbg !70
  %332 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b16 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u16 $0, $3;", "=c,l,b,c,b"(ptr addrspace(1) %318, i1 %331, i16 0, i1 %331) #4, !dbg !70
  %333 = bitcast i16 %332 to bfloat, !dbg !70
  %334 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %324) #4, !dbg !71
  %335 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %327) #4, !dbg !71
  %336 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %330) #4, !dbg !71
  %337 = tail call float asm "cvt.f32.bf16 $0, $1;", "=r,h"(bfloat %333) #4, !dbg !71
  %338 = fsub float %334, %169, !dbg !72
  %339 = fsub float %335, %169, !dbg !72
  %340 = fsub float %336, %169, !dbg !72
  %341 = fsub float %337, %169, !dbg !72
  %342 = fmul float %338, 0x3FF7154760000000, !dbg !73
  %343 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %342) #4, !dbg !73
  %344 = fmul float %339, 0x3FF7154760000000, !dbg !73
  %345 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %344) #4, !dbg !73
  %346 = fmul float %340, 0x3FF7154760000000, !dbg !73
  %347 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %346) #4, !dbg !73
  %348 = fmul float %341, 0x3FF7154760000000, !dbg !73
  %349 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %348) #4, !dbg !73
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %343, float %284) #4, !dbg !74
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %345, float %284) #4, !dbg !74
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float %284) #4, !dbg !74
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %284) #4, !dbg !74
  %354 = insertelement <4 x float> poison, float %334, i64 0, !dbg !75
  %355 = insertelement <4 x float> %354, float %335, i64 1, !dbg !75
  %356 = insertelement <4 x float> %355, float %336, i64 2, !dbg !75
  %357 = insertelement <4 x float> %356, float %337, i64 3, !dbg !75
  %358 = insertelement <4 x float> poison, float %350, i64 0, !dbg !75
  %359 = insertelement <4 x float> %358, float %351, i64 1, !dbg !75
  %360 = insertelement <4 x float> %359, float %352, i64 2, !dbg !75
  %361 = insertelement <4 x float> %360, float %353, i64 3, !dbg !75
  %362 = fmul <4 x float> %357, %361, !dbg !75
  %363 = fsub float %334, %289, !dbg !76
  %364 = fsub float %335, %289, !dbg !76
  %365 = fsub float %336, %289, !dbg !76
  %366 = fsub float %337, %289, !dbg !76
  %367 = fmul float %363, 0x3FF7154760000000, !dbg !77
  %368 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %367) #4, !dbg !77
  %369 = fmul float %364, 0x3FF7154760000000, !dbg !77
  %370 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %369) #4, !dbg !77
  %371 = fmul float %365, 0x3FF7154760000000, !dbg !77
  %372 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %371) #4, !dbg !77
  %373 = fmul float %366, 0x3FF7154760000000, !dbg !77
  %374 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %373) #4, !dbg !77
  %375 = insertelement <8 x float> poison, float %368, i64 4, !dbg !78
  %376 = insertelement <8 x float> %375, float %370, i64 5, !dbg !78
  %377 = insertelement <8 x float> %376, float %372, i64 6, !dbg !78
  %378 = insertelement <8 x float> %377, float %374, i64 7, !dbg !78
  %379 = shufflevector <4 x float> %362, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !78
  %380 = shufflevector <8 x float> %379, <8 x float> %378, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 12, i32 13, i32 14, i32 15>, !dbg !78
  %381 = fadd <8 x float> %299, %380, !dbg !78
  %382 = select <8 x i1> %321, <8 x float> %381, <8 x float> %299, !dbg !79
  %383 = add i32 %298, 2048, !dbg !64
  %384 = icmp slt i32 %383, %7, !dbg !64
  br i1 %384, label %.lr.ph12, label %._crit_edge13, !dbg !64

._crit_edge13:                                    ; preds = %.lr.ph12, %._crit_edge9
  %385 = phi <8 x float> [ zeroinitializer, %._crit_edge9 ], [ %382, %.lr.ph12 ], !dbg !80
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %shift = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %386 = fadd <8 x float> %385, %shift, !dbg !83
  %shift39 = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %387 = fadd <8 x float> %shift39, %386, !dbg !83
  %shift40 = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !83
  %388 = fadd <8 x float> %shift40, %387, !dbg !83
  %389 = extractelement <8 x float> %388, i64 0, !dbg !83
  %390 = bitcast float %389 to i32, !dbg !81
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 16, i32 31), !dbg !81
  %392 = bitcast i32 %391 to float, !dbg !81
  %393 = fadd float %389, %392, !dbg !83
  %394 = bitcast float %393 to i32, !dbg !81
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 8, i32 31), !dbg !81
  %396 = bitcast i32 %395 to float, !dbg !81
  %397 = fadd float %393, %396, !dbg !83
  %398 = bitcast float %397 to i32, !dbg !81
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 4, i32 31), !dbg !81
  %400 = bitcast i32 %399 to float, !dbg !81
  %401 = fadd float %397, %400, !dbg !83
  %402 = bitcast float %401 to i32, !dbg !81
  %403 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %402, i32 2, i32 31), !dbg !81
  %404 = bitcast i32 %403 to float, !dbg !81
  %405 = fadd float %401, %404, !dbg !83
  %406 = bitcast float %405 to i32, !dbg !81
  %407 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %406, i32 1, i32 31), !dbg !81
  %408 = bitcast i32 %407 to float, !dbg !81
  %409 = fadd float %405, %408, !dbg !83
  %410 = bitcast float %409 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %410, i1 %129) #4, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %411 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !81
  %412 = bitcast i32 %411 to float, !dbg !81
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 8, i32 31), !dbg !81
  %414 = bitcast i32 %413 to float, !dbg !81
  %415 = fadd float %412, %414, !dbg !83
  %416 = bitcast float %415 to i32, !dbg !81
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 4, i32 31), !dbg !81
  %418 = bitcast i32 %417 to float, !dbg !81
  %419 = fadd float %415, %418, !dbg !83
  %420 = bitcast float %419 to i32, !dbg !81
  %421 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %420, i32 2, i32 31), !dbg !81
  %422 = bitcast i32 %421 to float, !dbg !81
  %423 = fadd float %419, %422, !dbg !83
  %424 = bitcast float %423 to i32, !dbg !81
  %425 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %424, i32 1, i32 31), !dbg !81
  %426 = bitcast i32 %425 to float, !dbg !81
  %427 = fadd float %423, %426, !dbg !83
  %428 = bitcast float %427 to <1 x i32>, !dbg !81
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %428, i1 %166) #4, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !81
  %429 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !81
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %shift41 = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !86
  %430 = fadd <8 x float> %385, %shift41, !dbg !86
  %shift42 = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !86
  %431 = fadd <8 x float> %shift42, %430, !dbg !86
  %shift43 = shufflevector <8 x float> %385, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !86
  %432 = fadd <8 x float> %shift43, %431, !dbg !86
  %433 = extractelement <8 x float> %432, i64 4, !dbg !86
  %434 = bitcast float %433 to i32, !dbg !84
  %435 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %434, i32 16, i32 31), !dbg !84
  %436 = bitcast i32 %435 to float, !dbg !84
  %437 = fadd float %433, %436, !dbg !86
  %438 = bitcast float %437 to i32, !dbg !84
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 8, i32 31), !dbg !84
  %440 = bitcast i32 %439 to float, !dbg !84
  %441 = fadd float %437, %440, !dbg !86
  %442 = bitcast float %441 to i32, !dbg !84
  %443 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %442, i32 4, i32 31), !dbg !84
  %444 = bitcast i32 %443 to float, !dbg !84
  %445 = fadd float %441, %444, !dbg !86
  %446 = bitcast float %445 to i32, !dbg !84
  %447 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %446, i32 2, i32 31), !dbg !84
  %448 = bitcast i32 %447 to float, !dbg !84
  %449 = fadd float %445, %448, !dbg !86
  %450 = bitcast float %449 to i32, !dbg !84
  %451 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 1, i32 31), !dbg !84
  %452 = bitcast i32 %451 to float, !dbg !84
  %453 = fadd float %449, %452, !dbg !86
  %454 = bitcast float %453 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %454, i1 %129) #4, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %455 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #4, !dbg !84
  %456 = bitcast i32 %455 to float, !dbg !84
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 8, i32 31), !dbg !84
  %458 = bitcast i32 %457 to float, !dbg !84
  %459 = fadd float %456, %458, !dbg !86
  %460 = bitcast float %459 to i32, !dbg !84
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 4, i32 31), !dbg !84
  %462 = bitcast i32 %461 to float, !dbg !84
  %463 = fadd float %459, %462, !dbg !86
  %464 = bitcast float %463 to i32, !dbg !84
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 2, i32 31), !dbg !84
  %466 = bitcast i32 %465 to float, !dbg !84
  %467 = fadd float %463, %466, !dbg !86
  %468 = bitcast float %467 to i32, !dbg !84
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 1, i32 31), !dbg !84
  %470 = bitcast i32 %469 to float, !dbg !84
  %471 = fadd float %467, %470, !dbg !86
  %472 = bitcast float %471 to <1 x i32>, !dbg !84
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %472, i1 %166) #4, !dbg !84
  tail call void @llvm.nvvm.barrier0(), !dbg !84
  %473 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !84
  %474 = fcmp olt float %473, 0x3810000000000000, !dbg !87
  %475 = fmul float %473, 0x4160000000000000, !dbg !87
  %.02.i = select i1 %474, float %475, float %473, !dbg !87
  %i.i.0.i = select i1 %474, float -2.300000e+01, float 0.000000e+00, !dbg !87
  %476 = bitcast float %.02.i to i32, !dbg !87
  %477 = add i32 %476, -1059760811, !dbg !87
  %478 = and i32 %477, -8388608, !dbg !87
  %479 = sub i32 %476, %478, !dbg !87
  %480 = bitcast i32 %479 to float, !dbg !87
  %481 = sitofp i32 %478 to float, !dbg !87
  %482 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not.i = icmp eq i32 %482, 0, !dbg !87
  %483 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %481, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !87
  %484 = tail call float @llvm.nvvm.fma.rn.f(float %481, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !87
  %.08.i = select i1 %.not.i, float %484, float %483, !dbg !87
  %485 = fadd float %480, -1.000000e+00, !dbg !87
  %486 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not1.i = icmp eq i32 %486, 0, !dbg !87
  %487 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %485, float 0x3FC2073EC0000000) #4, !dbg !87
  %488 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %485, float 0x3FC2073EC0000000) #4, !dbg !87
  %.010.i = select i1 %.not1.i, float %488, float %487, !dbg !87
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not2.i = icmp eq i32 %489, 0, !dbg !87
  %490 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %485, float 0xBFBF19B980000000) #4, !dbg !87
  %491 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %485, float 0xBFBF19B980000000) #4, !dbg !87
  %.011.i = select i1 %.not2.i, float %491, float %490, !dbg !87
  %492 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not3.i = icmp eq i32 %492, 0, !dbg !87
  %493 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %485, float 0x3FC1E52AA0000000) #4, !dbg !87
  %494 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %485, float 0x3FC1E52AA0000000) #4, !dbg !87
  %.012.i = select i1 %.not3.i, float %494, float %493, !dbg !87
  %495 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not4.i = icmp eq i32 %495, 0, !dbg !87
  %496 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %485, float 0xBFC55B1720000000) #4, !dbg !87
  %497 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %485, float 0xBFC55B1720000000) #4, !dbg !87
  %.09.i = select i1 %.not4.i, float %497, float %496, !dbg !87
  %498 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not5.i = icmp eq i32 %498, 0, !dbg !87
  %499 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %485, float 0x3FC99DA160000000) #4, !dbg !87
  %500 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %485, float 0x3FC99DA160000000) #4, !dbg !87
  %.05.i = select i1 %.not5.i, float %500, float %499, !dbg !87
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not6.i = icmp eq i32 %501, 0, !dbg !87
  %502 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %485, float 0xBFCFFFE440000000) #4, !dbg !87
  %503 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %485, float 0xBFCFFFE440000000) #4, !dbg !87
  %.01.i = select i1 %.not6.i, float %503, float %502, !dbg !87
  %504 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not7.i = icmp eq i32 %504, 0, !dbg !87
  %505 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %485, float 0x3FD5554F00000000) #4, !dbg !87
  %506 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %485, float 0x3FD5554F00000000) #4, !dbg !87
  %.0.i = select i1 %.not7.i, float %506, float %505, !dbg !87
  %507 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not8.i = icmp eq i32 %507, 0, !dbg !87
  %508 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %485, float -5.000000e-01) #4, !dbg !87
  %509 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %485, float -5.000000e-01) #4, !dbg !87
  %.07.i = select i1 %.not8.i, float %509, float %508, !dbg !87
  %510 = fmul float %485, %.07.i, !dbg !87
  %511 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not9.i = icmp eq i32 %511, 0, !dbg !87
  %512 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %510, float %485, float %485) #4, !dbg !87
  %513 = tail call float @llvm.nvvm.fma.rn.f(float %510, float %485, float %485) #4, !dbg !87
  %.06.i = select i1 %.not9.i, float %513, float %512, !dbg !87
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not10.i = icmp eq i32 %514, 0, !dbg !87
  %515 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !87
  %516 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !87
  %.04.i = select i1 %.not10.i, float %516, float %515, !dbg !87
  %517 = icmp ugt i32 %476, 2139095039, !dbg !87
  br i1 %517, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !87

__nv_fmaf_rn.exit.i.i:                            ; preds = %._crit_edge13
  %518 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !87
  %.not11.i = icmp eq i32 %518, 0, !dbg !87
  %519 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !87
  %520 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !87
  %.03.i = select i1 %.not11.i, float %520, float %519, !dbg !87
  br label %__nv_logf.exit, !dbg !87

__nv_logf.exit:                                   ; preds = %._crit_edge13, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %._crit_edge13 ], !dbg !87
  %521 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !87
  %r.i.1.i = select i1 %521, float 0xFFF0000000000000, float %r.i.0.i, !dbg !87
  %522 = fadd float %289, %r.i.1.i, !dbg !88
  %523 = fsub float %522, %429, !dbg !89
  tail call void @llvm.nvvm.barrier0(), !dbg !90
  %524 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !91
  %525 = bitcast float %523 to i32, !dbg !92
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %524, i1 %174) #4, !dbg !92
  %526 = getelementptr float, ptr addrspace(1) %4, i64 %170, !dbg !93
  %527 = bitcast float %522 to i32, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %527, ptr addrspace(1) %526, i1 %174) #4, !dbg !94
  ret void, !dbg !95
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cshlarcqs4i4ihwoqzt3ylj4dpzkunlwsajkkhruwyp3glbrsn3n.py", directory: "/root/workspace/VRAG_test/VRAG_lsm/tmp/torchinductor_root/sh")
!4 = !{ptr @triton_red_fused__softmax__to_copy_logsumexp_mul_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax__to_copy_logsumexp_mul_sub_sum_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax__to_copy_logsumexp_mul_sub_sum_0", linkageName: "triton_red_fused__softmax__to_copy_logsumexp_mul_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 20, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 21, scope: !7)
!12 = !DILocation(line: 23, column: 33, scope: !7)
!13 = !DILocation(line: 30, column: 43, scope: !7)
!14 = !DILocation(line: 26, column: 36, scope: !7)
!15 = !DILocation(line: 27, column: 27, scope: !7)
!16 = !DILocation(line: 30, column: 39, scope: !7)
!17 = !DILocation(line: 30, column: 34, scope: !7)
!18 = !DILocation(line: 120, column: 21, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "triton_helpers.py", directory: "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/torch/_inductor/runtime")
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 25, scope: !7)
!23 = !DILocation(line: 30, column: 56, scope: !7)
!24 = !DILocation(line: 30, column: 48, scope: !7)
!25 = !DILocation(line: 30, column: 107, scope: !7)
!26 = !DILocation(line: 118, column: 15, scope: !19, inlinedAt: !21)
!27 = !DILocation(line: 120, column: 16, scope: !19, inlinedAt: !21)
!28 = !DILocation(line: 121, column: 29, scope: !19, inlinedAt: !21)
!29 = !DILocation(line: 34, column: 46, scope: !7)
!30 = !DILocation(line: 25, column: 53, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !33)
!32 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !33)
!36 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !33)
!37 = !DILocation(line: 131, column: 29, scope: !19, inlinedAt: !33)
!38 = !DILocation(line: 36, column: 25, scope: !7)
!39 = !DILocation(line: 36, column: 36, scope: !7)
!40 = !DILocation(line: 38, column: 36, scope: !7)
!41 = !DILocation(line: 39, column: 27, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 39, scope: !7)
!44 = !DILocation(line: 42, column: 34, scope: !7)
!45 = !DILocation(line: 42, column: 56, scope: !7)
!46 = !DILocation(line: 42, column: 48, scope: !7)
!47 = !DILocation(line: 42, column: 107, scope: !7)
!48 = !DILocation(line: 44, column: 22, scope: !7)
!49 = !DILocation(line: 45, column: 27, scope: !7)
!50 = !DILocation(line: 47, column: 25, scope: !7)
!51 = !DILocation(line: 48, column: 48, scope: !7)
!52 = !DILocation(line: 37, column: 42, scope: !7)
!53 = !DILocation(line: 267, column: 36, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "standard.py", directory: "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/triton/language")
!56 = !DILocation(line: 49, column: 27, scope: !7)
!57 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !56)
!58 = distinct !DILexicalBlockFile(scope: !54, file: !55, discriminator: 0)
!59 = !DILocation(line: 50, column: 25, scope: !7)
!60 = !DILocation(line: 50, column: 37, scope: !7)
!61 = !DILocation(line: 66, column: 28, scope: !7)
!62 = !DILocation(line: 68, column: 25, scope: !7)
!63 = !DILocation(line: 70, column: 39, scope: !7)
!64 = !DILocation(line: 53, column: 36, scope: !7)
!65 = !DILocation(line: 54, column: 27, scope: !7)
!66 = !DILocation(line: 57, column: 40, scope: !7)
!67 = !DILocation(line: 57, column: 35, scope: !7)
!68 = !DILocation(line: 55, column: 25, scope: !7)
!69 = !DILocation(line: 57, column: 57, scope: !7)
!70 = !DILocation(line: 57, column: 49, scope: !7)
!71 = !DILocation(line: 57, column: 109, scope: !7)
!72 = !DILocation(line: 59, column: 24, scope: !7)
!73 = !DILocation(line: 60, column: 28, scope: !7)
!74 = !DILocation(line: 61, column: 24, scope: !7)
!75 = !DILocation(line: 62, column: 24, scope: !7)
!76 = !DILocation(line: 71, column: 24, scope: !7)
!77 = !DILocation(line: 72, column: 28, scope: !7)
!78 = !DILocation(line: 64, column: 25, scope: !7)
!79 = !DILocation(line: 65, column: 48, scope: !7)
!80 = !DILocation(line: 51, column: 42, scope: !7)
!81 = !DILocation(line: 267, column: 36, scope: !54, inlinedAt: !82)
!82 = !DILocation(line: 76, column: 27, scope: !7)
!83 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !82)
!84 = !DILocation(line: 267, column: 36, scope: !54, inlinedAt: !85)
!85 = !DILocation(line: 77, column: 27, scope: !7)
!86 = !DILocation(line: 256, column: 15, scope: !58, inlinedAt: !85)
!87 = !DILocation(line: 78, column: 24, scope: !7)
!88 = !DILocation(line: 84, column: 20, scope: !7)
!89 = !DILocation(line: 85, column: 20, scope: !7)
!90 = !DILocation(line: 86, column: 4, scope: !7)
!91 = !DILocation(line: 87, column: 28, scope: !7)
!92 = !DILocation(line: 87, column: 40, scope: !7)
!93 = !DILocation(line: 88, column: 25, scope: !7)
!94 = !DILocation(line: 88, column: 37, scope: !7)
!95 = !DILocation(line: 88, column: 4, scope: !7)
