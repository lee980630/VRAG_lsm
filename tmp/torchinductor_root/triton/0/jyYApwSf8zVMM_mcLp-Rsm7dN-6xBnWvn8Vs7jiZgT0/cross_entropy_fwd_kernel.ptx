//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_80
.address_size 64

	// .globl	cross_entropy_fwd_kernel // -- Begin function cross_entropy_fwd_kernel
.extern .shared .align 16 .b8 global_smem[];
.global .align 1 .b8 _$_str[11] = {95, 95, 67, 85, 68, 65, 95, 70, 84, 90};
                                        // @cross_entropy_fwd_kernel
.visible .entry cross_entropy_fwd_kernel(
	.param .u64 .ptr .global .align 1 cross_entropy_fwd_kernel_param_0,
	.param .u64 .ptr .global .align 1 cross_entropy_fwd_kernel_param_1,
	.param .u64 .ptr .global .align 1 cross_entropy_fwd_kernel_param_2,
	.param .u64 .ptr .global .align 1 cross_entropy_fwd_kernel_param_3,
	.param .u64 .ptr .global .align 1 cross_entropy_fwd_kernel_param_4,
	.param .f32 cross_entropy_fwd_kernel_param_5,
	.param .f32 cross_entropy_fwd_kernel_param_6,
	.param .f32 cross_entropy_fwd_kernel_param_7,
	.param .u32 cross_entropy_fwd_kernel_param_8,
	.param .u32 cross_entropy_fwd_kernel_param_9,
	.param .u32 cross_entropy_fwd_kernel_param_10,
	.param .u32 cross_entropy_fwd_kernel_param_11,
	.param .u32 cross_entropy_fwd_kernel_param_12
)
.reqntid 512, 1, 1
{
	.reg .pred 	%p<44>;
	.reg .b16 	%rs<67>;
	.reg .b32 	%r<167>;
	.reg .f32 	%f<327>;
	.reg .b64 	%rd<30>;
	.loc	1 25 0                          // cross_entropy.py:25:0
$L__func_begin0:
	.loc	1 25 0                          // cross_entropy.py:25:0

// %bb.0:
	ld.param.u32 	%r14, [cross_entropy_fwd_kernel_param_11];
	ld.param.f32 	%f14, [cross_entropy_fwd_kernel_param_6];
$L__tmp0:
	.loc	1 45 28                         // cross_entropy.py:45:28
	// begin inline asm
	mov.u32 %r15, %ctaid.x;
	// end inline asm
	ld.param.u64 	%rd9, [cross_entropy_fwd_kernel_param_3];
	ld.param.u32 	%r16, [cross_entropy_fwd_kernel_param_12];
	.loc	1 46 40                         // cross_entropy.py:46:40
	mul.wide.s32 	%rd10, %r15, %r16;
	.loc	1 46 30                         // cross_entropy.py:46:30
	shl.b64 	%rd11, %rd10, 1;
	add.s64 	%rd2, %rd9, %rd11;
	.loc	1 53 45                         // cross_entropy.py:53:45
	mov.u32 	%r1, %tid.x;
	.loc	1 52 43                         // cross_entropy.py:52:43
	setp.lt.s32 	%p2, %r14, 1;
	mov.f32 	%f324, 0fFF800000;
	mov.f32 	%f323, 0f00000000;
	@%p2 bra 	$L__BB0_3;
// %bb.1:                               // %.lr.ph
	.loc	1 53 45                         // cross_entropy.py:53:45
	shl.b32 	%r17, %r1, 3;
	and.b32  	%r2, %r17, 4088;
	and.b32  	%r3, %r1, 31;
	shr.u32 	%r19, %r1, 3;
	and.b32  	%r20, %r19, 60;
	mov.u32 	%r21, global_smem;
	add.s32 	%r88, %r21, %r20;
	setp.lt.s32 	%p26, %r1, 16;
	shl.b32 	%r22, %r1, 2;
	add.s32 	%r97, %r21, %r22;
	and.b32  	%r23, %r1, 15;
	setp.eq.s32 	%p4, %r23, 0;
	and.pred  	%p27, %p26, %p4;
	mov.b32 	%r164, 0;
	mov.f32 	%f323, 0f00000000;
	mov.f32 	%f321, 0fFF800000;
	setp.eq.s32 	%p25, %r3, 0;
$L__BB0_2:                              // =>This Inner Loop Header: Depth=1
	.loc	1 53 32                         // cross_entropy.py:53:32
	add.s32 	%r100, %r2, %r164;
	add.s32 	%r101, %r100, 4096;
	add.s32 	%r102, %r100, 8192;
	.loc	1 54 60                         // cross_entropy.py:54:60
	add.s32 	%r103, %r100, 12288;
	setp.lt.s32 	%p5, %r100, %r14;
	setp.lt.s32 	%p10, %r101, %r14;
	setp.lt.s32 	%p15, %r102, %r14;
	setp.lt.s32 	%p20, %r103, %r14;
	.loc	1 54 42                         // cross_entropy.py:54:42
	mul.wide.s32 	%rd16, %r100, 2;
	add.s64 	%rd12, %rd2, %rd16;
	add.s64 	%rd13, %rd12, 8192;
	add.s64 	%rd14, %rd12, 16384;
	add.s64 	%rd15, %rd12, 24576;
	mov.b32 	%r28, -8323200;
	.loc	1 54 29                         // cross_entropy.py:54:29
	// begin inline asm
	mov.u32 %r24, 0x0;
	mov.u32 %r25, 0x0;
	mov.u32 %r26, 0x0;
	mov.u32 %r27, 0x0;
	@%p5 ld.global.v4.b32 { %r24, %r25, %r26, %r27 }, [ %rd12 + 0 ];
	@!%p5 mov.u32 %r24, %r28;
	@!%p5 mov.u32 %r25, %r28;
	@!%p5 mov.u32 %r26, %r28;
	@!%p5 mov.u32 %r27, %r28;
	// end inline asm
	mov.b32 	{%rs33, %rs34}, %r24;
	mov.b32 	{%rs35, %rs36}, %r25;
	mov.b32 	{%rs37, %rs38}, %r26;
	mov.b32 	{%rs39, %rs40}, %r27;
	// begin inline asm
	mov.u32 %r32, 0x0;
	mov.u32 %r33, 0x0;
	mov.u32 %r34, 0x0;
	mov.u32 %r35, 0x0;
	@%p10 ld.global.v4.b32 { %r32, %r33, %r34, %r35 }, [ %rd13 + 0 ];
	@!%p10 mov.u32 %r32, %r28;
	@!%p10 mov.u32 %r33, %r28;
	@!%p10 mov.u32 %r34, %r28;
	@!%p10 mov.u32 %r35, %r28;
	// end inline asm
	mov.b32 	{%rs41, %rs42}, %r32;
	mov.b32 	{%rs43, %rs44}, %r33;
	mov.b32 	{%rs45, %rs46}, %r34;
	mov.b32 	{%rs47, %rs48}, %r35;
	// begin inline asm
	mov.u32 %r40, 0x0;
	mov.u32 %r41, 0x0;
	mov.u32 %r42, 0x0;
	mov.u32 %r43, 0x0;
	@%p15 ld.global.v4.b32 { %r40, %r41, %r42, %r43 }, [ %rd14 + 0 ];
	@!%p15 mov.u32 %r40, %r28;
	@!%p15 mov.u32 %r41, %r28;
	@!%p15 mov.u32 %r42, %r28;
	@!%p15 mov.u32 %r43, %r28;
	// end inline asm
	mov.b32 	{%rs49, %rs50}, %r40;
	mov.b32 	{%rs51, %rs52}, %r41;
	mov.b32 	{%rs53, %rs54}, %r42;
	mov.b32 	{%rs55, %rs56}, %r43;
	// begin inline asm
	mov.u32 %r48, 0x0;
	mov.u32 %r49, 0x0;
	mov.u32 %r50, 0x0;
	mov.u32 %r51, 0x0;
	@%p20 ld.global.v4.b32 { %r48, %r49, %r50, %r51 }, [ %rd15 + 0 ];
	@!%p20 mov.u32 %r48, %r28;
	@!%p20 mov.u32 %r49, %r28;
	@!%p20 mov.u32 %r50, %r28;
	@!%p20 mov.u32 %r51, %r28;
	// end inline asm
	mov.b32 	{%rs57, %rs58}, %r48;
	mov.b32 	{%rs59, %rs60}, %r49;
	mov.b32 	{%rs61, %rs62}, %r50;
	mov.b32 	{%rs63, %rs64}, %r51;
	.loc	1 55 16                         // cross_entropy.py:55:16
	// begin inline asm
	cvt.f32.bf16 %r56, %rs33;
	// end inline asm
	mov.b32 	%f86, %r56;
	// begin inline asm
	cvt.f32.bf16 %r57, %rs34;
	// end inline asm
	mov.b32 	%f87, %r57;
	// begin inline asm
	cvt.f32.bf16 %r58, %rs35;
	// end inline asm
	mov.b32 	%f88, %r58;
	// begin inline asm
	cvt.f32.bf16 %r59, %rs36;
	// end inline asm
	mov.b32 	%f89, %r59;
	// begin inline asm
	cvt.f32.bf16 %r60, %rs37;
	// end inline asm
	mov.b32 	%f90, %r60;
	// begin inline asm
	cvt.f32.bf16 %r61, %rs38;
	// end inline asm
	mov.b32 	%f91, %r61;
	// begin inline asm
	cvt.f32.bf16 %r62, %rs39;
	// end inline asm
	mov.b32 	%f92, %r62;
	// begin inline asm
	cvt.f32.bf16 %r63, %rs40;
	// end inline asm
	mov.b32 	%f93, %r63;
	// begin inline asm
	cvt.f32.bf16 %r64, %rs41;
	// end inline asm
	mov.b32 	%f94, %r64;
	// begin inline asm
	cvt.f32.bf16 %r65, %rs42;
	// end inline asm
	mov.b32 	%f95, %r65;
	// begin inline asm
	cvt.f32.bf16 %r66, %rs43;
	// end inline asm
	mov.b32 	%f96, %r66;
	// begin inline asm
	cvt.f32.bf16 %r67, %rs44;
	// end inline asm
	mov.b32 	%f97, %r67;
	// begin inline asm
	cvt.f32.bf16 %r68, %rs45;
	// end inline asm
	mov.b32 	%f98, %r68;
	// begin inline asm
	cvt.f32.bf16 %r69, %rs46;
	// end inline asm
	mov.b32 	%f99, %r69;
	// begin inline asm
	cvt.f32.bf16 %r70, %rs47;
	// end inline asm
	mov.b32 	%f100, %r70;
	// begin inline asm
	cvt.f32.bf16 %r71, %rs48;
	// end inline asm
	mov.b32 	%f101, %r71;
	// begin inline asm
	cvt.f32.bf16 %r72, %rs49;
	// end inline asm
	mov.b32 	%f102, %r72;
	// begin inline asm
	cvt.f32.bf16 %r73, %rs50;
	// end inline asm
	mov.b32 	%f103, %r73;
	// begin inline asm
	cvt.f32.bf16 %r74, %rs51;
	// end inline asm
	mov.b32 	%f104, %r74;
	// begin inline asm
	cvt.f32.bf16 %r75, %rs52;
	// end inline asm
	mov.b32 	%f105, %r75;
	// begin inline asm
	cvt.f32.bf16 %r76, %rs53;
	// end inline asm
	mov.b32 	%f106, %r76;
	// begin inline asm
	cvt.f32.bf16 %r77, %rs54;
	// end inline asm
	mov.b32 	%f107, %r77;
	// begin inline asm
	cvt.f32.bf16 %r78, %rs55;
	// end inline asm
	mov.b32 	%f108, %r78;
	// begin inline asm
	cvt.f32.bf16 %r79, %rs56;
	// end inline asm
	mov.b32 	%f109, %r79;
	// begin inline asm
	cvt.f32.bf16 %r80, %rs57;
	// end inline asm
	mov.b32 	%f110, %r80;
	// begin inline asm
	cvt.f32.bf16 %r81, %rs58;
	// end inline asm
	mov.b32 	%f111, %r81;
	// begin inline asm
	cvt.f32.bf16 %r82, %rs59;
	// end inline asm
	mov.b32 	%f112, %r82;
	// begin inline asm
	cvt.f32.bf16 %r83, %rs60;
	// end inline asm
	mov.b32 	%f113, %r83;
	// begin inline asm
	cvt.f32.bf16 %r84, %rs61;
	// end inline asm
	mov.b32 	%f114, %r84;
	// begin inline asm
	cvt.f32.bf16 %r85, %rs62;
	// end inline asm
	mov.b32 	%f115, %r85;
	// begin inline asm
	cvt.f32.bf16 %r86, %rs63;
	// end inline asm
	mov.b32 	%f116, %r86;
	// begin inline asm
	cvt.f32.bf16 %r87, %rs64;
	// end inline asm
	mov.b32 	%f117, %r87;
	.loc	1 56 16                         // cross_entropy.py:56:16
	mul.f32 	%f118, %f14, %f86;
	mul.f32 	%f119, %f14, %f87;
	mul.f32 	%f120, %f14, %f88;
	mul.f32 	%f121, %f14, %f89;
	mul.f32 	%f122, %f14, %f90;
	mul.f32 	%f123, %f14, %f91;
	mul.f32 	%f124, %f14, %f92;
	mul.f32 	%f125, %f14, %f93;
	mul.f32 	%f126, %f14, %f94;
	mul.f32 	%f127, %f14, %f95;
	mul.f32 	%f128, %f14, %f96;
	mul.f32 	%f129, %f14, %f97;
	mul.f32 	%f130, %f14, %f98;
	mul.f32 	%f131, %f14, %f99;
	mul.f32 	%f132, %f14, %f100;
	mul.f32 	%f133, %f14, %f101;
	mul.f32 	%f134, %f14, %f102;
	mul.f32 	%f135, %f14, %f103;
	mul.f32 	%f136, %f14, %f104;
	mul.f32 	%f137, %f14, %f105;
	mul.f32 	%f138, %f14, %f106;
	mul.f32 	%f139, %f14, %f107;
	mul.f32 	%f140, %f14, %f108;
	mul.f32 	%f141, %f14, %f109;
	mul.f32 	%f142, %f14, %f110;
	mul.f32 	%f143, %f14, %f111;
	mul.f32 	%f144, %f14, %f112;
	mul.f32 	%f145, %f14, %f113;
	mul.f32 	%f146, %f14, %f114;
	mul.f32 	%f147, %f14, %f115;
	mul.f32 	%f148, %f14, %f116;
	mul.f32 	%f149, %f14, %f117;
$L__tmp1:
	.loc	2 184 40                        // standard.py:184:40
	bar.sync 	0;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f150, %f118, %f119;
	max.f32 	%f151, %f150, %f120;
	max.f32 	%f152, %f151, %f121;
	max.f32 	%f153, %f152, %f122;
	max.f32 	%f154, %f153, %f123;
	max.f32 	%f155, %f154, %f124;
	max.f32 	%f156, %f155, %f125;
	max.f32 	%f157, %f156, %f126;
	max.f32 	%f158, %f157, %f127;
	max.f32 	%f159, %f158, %f128;
	max.f32 	%f160, %f159, %f129;
	max.f32 	%f161, %f160, %f130;
	max.f32 	%f162, %f161, %f131;
	max.f32 	%f163, %f162, %f132;
	max.f32 	%f164, %f163, %f133;
	max.f32 	%f165, %f164, %f134;
	max.f32 	%f166, %f165, %f135;
	max.f32 	%f167, %f166, %f136;
	max.f32 	%f168, %f167, %f137;
	max.f32 	%f169, %f168, %f138;
	max.f32 	%f170, %f169, %f139;
	max.f32 	%f171, %f170, %f140;
	max.f32 	%f172, %f171, %f141;
	max.f32 	%f173, %f172, %f142;
	max.f32 	%f174, %f173, %f143;
	max.f32 	%f175, %f174, %f144;
	max.f32 	%f176, %f175, %f145;
	max.f32 	%f177, %f176, %f146;
	max.f32 	%f178, %f177, %f147;
	max.f32 	%f179, %f178, %f148;
	max.f32 	%f180, %f179, %f149;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r120, %f180;
	shfl.sync.bfly.b32	%r121, %r120, 16, 31, -1;
	mov.b32 	%f181, %r121;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f182, %f180, %f181;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r122, %f182;
	shfl.sync.bfly.b32	%r123, %r122, 8, 31, -1;
	mov.b32 	%f183, %r123;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f184, %f182, %f183;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r124, %f184;
	shfl.sync.bfly.b32	%r125, %r124, 4, 31, -1;
	mov.b32 	%f185, %r125;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f186, %f184, %f185;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r126, %f186;
	shfl.sync.bfly.b32	%r127, %r126, 2, 31, -1;
	mov.b32 	%f187, %r127;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f188, %f186, %f187;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r128, %f188;
	shfl.sync.bfly.b32	%r129, %r128, 1, 31, -1;
	mov.b32 	%f189, %r129;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f190, %f188, %f189;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r89, %f190;
	// begin inline asm
	@%p25 st.shared.b32 [ %r88 + 0 ], %r89;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p26 ld.shared.b32 %r90, [ %r97 + 0 ];
	// end inline asm
	mov.b32 	%f191, %r90;
	shfl.sync.bfly.b32	%r130, %r90, 8, 31, -1;
	mov.b32 	%f192, %r130;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f193, %f191, %f192;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r131, %f193;
	shfl.sync.bfly.b32	%r132, %r131, 4, 31, -1;
	mov.b32 	%f194, %r132;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f195, %f193, %f194;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r133, %f195;
	shfl.sync.bfly.b32	%r134, %r133, 2, 31, -1;
	mov.b32 	%f196, %r134;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f197, %f195, %f196;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r135, %f197;
	shfl.sync.bfly.b32	%r136, %r135, 1, 31, -1;
	mov.b32 	%f198, %r136;
	.loc	2 163 27                        // standard.py:163:27
	max.f32 	%f199, %f197, %f198;
	.loc	2 184 40                        // standard.py:184:40
	mov.b32 	%r93, %f199;
	// begin inline asm
	@%p27 st.shared.b32 [ %r97 + 0 ], %r93;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f200, [global_smem];
$L__tmp2:
	.loc	1 59 38                         // cross_entropy.py:59:38
	max.f32 	%f324, %f321, %f200;
	.loc	1 60 31                         // cross_entropy.py:60:31
	sub.f32 	%f201, %f321, %f324;
	.loc	1 60 25                         // cross_entropy.py:60:25
	mul.f32 	%f21, %f201, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f20, %f21;
	// end inline asm
	.loc	1 60 71                         // cross_entropy.py:60:71
	neg.f32 	%f202, %f324;
	fma.rn.f32 	%f203, %f14, %f86, %f202;
	fma.rn.f32 	%f204, %f14, %f87, %f202;
	fma.rn.f32 	%f205, %f14, %f88, %f202;
	fma.rn.f32 	%f206, %f14, %f89, %f202;
	fma.rn.f32 	%f207, %f14, %f90, %f202;
	fma.rn.f32 	%f208, %f14, %f91, %f202;
	fma.rn.f32 	%f209, %f14, %f92, %f202;
	fma.rn.f32 	%f210, %f14, %f93, %f202;
	fma.rn.f32 	%f211, %f14, %f94, %f202;
	fma.rn.f32 	%f212, %f14, %f95, %f202;
	fma.rn.f32 	%f213, %f14, %f96, %f202;
	fma.rn.f32 	%f214, %f14, %f97, %f202;
	fma.rn.f32 	%f215, %f14, %f98, %f202;
	fma.rn.f32 	%f216, %f14, %f99, %f202;
	fma.rn.f32 	%f217, %f14, %f100, %f202;
	fma.rn.f32 	%f218, %f14, %f101, %f202;
	fma.rn.f32 	%f219, %f14, %f102, %f202;
	fma.rn.f32 	%f220, %f14, %f103, %f202;
	fma.rn.f32 	%f221, %f14, %f104, %f202;
	fma.rn.f32 	%f222, %f14, %f105, %f202;
	fma.rn.f32 	%f223, %f14, %f106, %f202;
	fma.rn.f32 	%f224, %f14, %f107, %f202;
	fma.rn.f32 	%f225, %f14, %f108, %f202;
	fma.rn.f32 	%f226, %f14, %f109, %f202;
	fma.rn.f32 	%f227, %f14, %f110, %f202;
	fma.rn.f32 	%f228, %f14, %f111, %f202;
	fma.rn.f32 	%f229, %f14, %f112, %f202;
	fma.rn.f32 	%f230, %f14, %f113, %f202;
	fma.rn.f32 	%f231, %f14, %f114, %f202;
	fma.rn.f32 	%f232, %f14, %f115, %f202;
	fma.rn.f32 	%f233, %f14, %f116, %f202;
	fma.rn.f32 	%f234, %f14, %f117, %f202;
	.loc	1 60 62                         // cross_entropy.py:60:62
	mul.f32 	%f23, %f203, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f22, %f23;
	// end inline asm
	mul.f32 	%f25, %f204, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f24, %f25;
	// end inline asm
	mul.f32 	%f27, %f205, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f26, %f27;
	// end inline asm
	mul.f32 	%f29, %f206, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f28, %f29;
	// end inline asm
	mul.f32 	%f31, %f207, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f30, %f31;
	// end inline asm
	mul.f32 	%f33, %f208, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f32, %f33;
	// end inline asm
	mul.f32 	%f35, %f209, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f34, %f35;
	// end inline asm
	mul.f32 	%f37, %f210, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f36, %f37;
	// end inline asm
	mul.f32 	%f39, %f211, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f38, %f39;
	// end inline asm
	mul.f32 	%f41, %f212, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f40, %f41;
	// end inline asm
	mul.f32 	%f43, %f213, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f42, %f43;
	// end inline asm
	mul.f32 	%f45, %f214, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f44, %f45;
	// end inline asm
	mul.f32 	%f47, %f215, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f46, %f47;
	// end inline asm
	mul.f32 	%f49, %f216, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f48, %f49;
	// end inline asm
	mul.f32 	%f51, %f217, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f50, %f51;
	// end inline asm
	mul.f32 	%f53, %f218, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f52, %f53;
	// end inline asm
	mul.f32 	%f55, %f219, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f54, %f55;
	// end inline asm
	mul.f32 	%f57, %f220, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f56, %f57;
	// end inline asm
	mul.f32 	%f59, %f221, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f58, %f59;
	// end inline asm
	mul.f32 	%f61, %f222, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f60, %f61;
	// end inline asm
	mul.f32 	%f63, %f223, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f62, %f63;
	// end inline asm
	mul.f32 	%f65, %f224, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f64, %f65;
	// end inline asm
	mul.f32 	%f67, %f225, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f66, %f67;
	// end inline asm
	mul.f32 	%f69, %f226, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f68, %f69;
	// end inline asm
	mul.f32 	%f71, %f227, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f70, %f71;
	// end inline asm
	mul.f32 	%f73, %f228, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f72, %f73;
	// end inline asm
	mul.f32 	%f75, %f229, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f74, %f75;
	// end inline asm
	mul.f32 	%f77, %f230, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f76, %f77;
	// end inline asm
	mul.f32 	%f79, %f231, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f78, %f79;
	// end inline asm
	mul.f32 	%f81, %f232, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f80, %f81;
	// end inline asm
	mul.f32 	%f83, %f233, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f82, %f83;
	// end inline asm
	mul.f32 	%f85, %f234, 0f3FB8AA3B;
	// begin inline asm
	ex2.approx.f32 %f84, %f85;
	// end inline asm
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f235, %f22, %f24;
	add.f32 	%f236, %f235, %f26;
	add.f32 	%f237, %f236, %f28;
	add.f32 	%f238, %f237, %f30;
	add.f32 	%f239, %f238, %f32;
	add.f32 	%f240, %f239, %f34;
	add.f32 	%f241, %f240, %f36;
	add.f32 	%f242, %f241, %f38;
	add.f32 	%f243, %f242, %f40;
	add.f32 	%f244, %f243, %f42;
	add.f32 	%f245, %f244, %f44;
	add.f32 	%f246, %f245, %f46;
	add.f32 	%f247, %f246, %f48;
	add.f32 	%f248, %f247, %f50;
	add.f32 	%f249, %f248, %f52;
	add.f32 	%f250, %f249, %f54;
	add.f32 	%f251, %f250, %f56;
	add.f32 	%f252, %f251, %f58;
	add.f32 	%f253, %f252, %f60;
	add.f32 	%f254, %f253, %f62;
	add.f32 	%f255, %f254, %f64;
	add.f32 	%f256, %f255, %f66;
	add.f32 	%f257, %f256, %f68;
	add.f32 	%f258, %f257, %f70;
	add.f32 	%f259, %f258, %f72;
	add.f32 	%f260, %f259, %f74;
	add.f32 	%f261, %f260, %f76;
	add.f32 	%f262, %f261, %f78;
	add.f32 	%f263, %f262, %f80;
	add.f32 	%f264, %f263, %f82;
	add.f32 	%f265, %f264, %f84;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r137, %f265;
	shfl.sync.bfly.b32	%r138, %r137, 16, 31, -1;
	mov.b32 	%f266, %r138;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f267, %f265, %f266;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r139, %f267;
	shfl.sync.bfly.b32	%r140, %r139, 8, 31, -1;
	mov.b32 	%f268, %r140;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f269, %f267, %f268;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r141, %f269;
	shfl.sync.bfly.b32	%r142, %r141, 4, 31, -1;
	mov.b32 	%f270, %r142;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f271, %f269, %f270;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r143, %f271;
	shfl.sync.bfly.b32	%r144, %r143, 2, 31, -1;
	mov.b32 	%f272, %r144;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f273, %f271, %f272;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r145, %f273;
	shfl.sync.bfly.b32	%r146, %r145, 1, 31, -1;
	mov.b32 	%f274, %r146;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f275, %f273, %f274;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r95, %f275;
	// begin inline asm
	@%p25 st.shared.b32 [ %r88 + 0 ], %r95;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p26 ld.shared.b32 %r96, [ %r97 + 0 ];
	// end inline asm
	mov.b32 	%f276, %r96;
	shfl.sync.bfly.b32	%r147, %r96, 8, 31, -1;
	mov.b32 	%f277, %r147;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f278, %f276, %f277;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r148, %f278;
	shfl.sync.bfly.b32	%r149, %r148, 4, 31, -1;
	mov.b32 	%f279, %r149;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f280, %f278, %f279;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r150, %f280;
	shfl.sync.bfly.b32	%r151, %r150, 2, 31, -1;
	mov.b32 	%f281, %r151;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f282, %f280, %f281;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r152, %f282;
	shfl.sync.bfly.b32	%r153, %r152, 1, 31, -1;
	mov.b32 	%f283, %r153;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f284, %f282, %f283;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r99, %f284;
	// begin inline asm
	@%p27 st.shared.b32 [ %r97 + 0 ], %r99;
	// end inline asm
	bar.sync 	0;
	ld.shared.f32 	%f285, [global_smem];
$L__tmp4:
	.loc	1 60 48                         // cross_entropy.py:60:48
	fma.rn.f32 	%f323, %f323, %f20, %f285;
	.loc	1 52 43                         // cross_entropy.py:52:43
	add.s32 	%r164, %r164, 16384;
	setp.lt.s32 	%p31, %r164, %r14;
	mov.f32 	%f321, %f324;
	@%p31 bra 	$L__BB0_2;
$L__BB0_3:                              // %._crit_edge
	.loc	1 0 43                          // cross_entropy.py:0:43
	ld.param.u32 	%r12, [cross_entropy_fwd_kernel_param_8];
	ld.param.u64 	%rd8, [cross_entropy_fwd_kernel_param_4];
	ld.param.u64 	%rd6, [cross_entropy_fwd_kernel_param_1];
	cvt.s64.s32 	%rd1, %r15;
	.loc	1 62 21                         // cross_entropy.py:62:21
	setp.lt.f32 	%p32, %f323, 0f00800000;
	mul.f32 	%f286, %f323, 0f4B000000;
	selp.f32 	%f7, %f286, %f323, %p32;
	selp.f32 	%f287, 0fC1B80000, 0f00000000, %p32;
	mov.b32 	%r154, %f7;
	add.s32 	%r155, %r154, -1059760811;
	and.b32  	%r156, %r155, -8388608;
	sub.s32 	%r157, %r154, %r156;
	mov.b32 	%f288, %r157;
	cvt.rn.f32.s32 	%f289, %r156;
	mov.f32 	%f290, 0f34000000;
	fma.rn.ftz.f32 	%f291, %f289, %f290, %f287;
	add.f32 	%f292, %f288, 0fBF800000;
	mov.f32 	%f293, 0f3E1039F6;
	mov.f32 	%f294, 0fBE055027;
	fma.rn.ftz.f32 	%f295, %f294, %f292, %f293;
	mov.f32 	%f296, 0fBDF8CDCC;
	fma.rn.ftz.f32 	%f297, %f295, %f292, %f296;
	mov.f32 	%f298, 0f3E0F2955;
	fma.rn.ftz.f32 	%f299, %f297, %f292, %f298;
	mov.f32 	%f300, 0fBE2AD8B9;
	fma.rn.ftz.f32 	%f301, %f299, %f292, %f300;
	mov.f32 	%f302, 0f3E4CED0B;
	fma.rn.ftz.f32 	%f303, %f301, %f292, %f302;
	mov.f32 	%f304, 0fBE7FFF22;
	fma.rn.ftz.f32 	%f305, %f303, %f292, %f304;
	mov.f32 	%f306, 0f3EAAAA78;
	fma.rn.ftz.f32 	%f307, %f305, %f292, %f306;
	mov.f32 	%f308, 0fBF000000;
	fma.rn.ftz.f32 	%f309, %f307, %f292, %f308;
	mul.f32 	%f310, %f292, %f309;
	fma.rn.ftz.f32 	%f311, %f310, %f292, %f292;
	mov.f32 	%f312, 0f3F317218;
	fma.rn.ftz.f32 	%f325, %f291, %f312, %f311;
	setp.lt.u32 	%p33, %r154, 2139095040;
	@%p33 bra 	$L__BB0_5;
// %bb.4:                               // %__nv_fmaf_rn.exit.i.i
	.loc	1 0 21                          // cross_entropy.py:0:21
	mov.f32 	%f313, 0f7F800000;
	fma.rn.ftz.f32 	%f325, %f7, %f313, %f313;
$L__BB0_5:                              // %__nv_logf.exit
	ld.param.u64 	%rd7, [cross_entropy_fwd_kernel_param_2];
	ld.param.u64 	%rd5, [cross_entropy_fwd_kernel_param_0];
	mov.b32 	%r165, 0;
	.loc	1 62 21                         // cross_entropy.py:62:21
	setp.eq.f32 	%p36, %f7, 0f00000000;
	selp.f32 	%f314, 0fFF800000, %f325, %p36;
	.loc	1 62 28                         // cross_entropy.py:62:28
	add.f32 	%f11, %f324, %f314;
	.loc	1 63 27                         // cross_entropy.py:63:27
	shl.b64 	%rd20, %rd1, 2;
	add.s64 	%rd17, %rd6, %rd20;
	.loc	1 63 36                         // cross_entropy.py:63:36
	setp.eq.s32 	%p42, %r1, 0;
	mov.b32 	%r158, %f11;
	// begin inline asm
	@%p42 st.global.b32 [ %rd17 + 0 ], { %r158 };
	// end inline asm
	.loc	1 66 37                         // cross_entropy.py:66:37
	shl.b64 	%rd21, %rd1, 3;
	add.s64 	%rd19, %rd8, %rd21;
	mov.pred 	%p35, -1;
	.loc	1 66 24                         // cross_entropy.py:66:24
	// begin inline asm
	mov.u64 %rd18, 0x0;
	@%p35 ld.global.b64 { %rd18 }, [ %rd19 + 0 ];
	// end inline asm
	.loc	1 67 20                         // cross_entropy.py:67:20
	cvt.s64.s32 	%rd22, %r12;
	setp.eq.s64 	%p37, %rd18, %rd22;
	mov.u32 	%r166, %r165;
	.loc	1 67 7                          // cross_entropy.py:67:7
	@%p37 bra 	$L__BB0_9;
// %bb.6:
	.loc	1 0 7                           // cross_entropy.py:0:7
	ld.param.u32 	%r13, [cross_entropy_fwd_kernel_param_10];
	ld.param.f32 	%f15, [cross_entropy_fwd_kernel_param_7];
	.loc	1 71 21                         // cross_entropy.py:71:21
	cvt.s64.s32 	%rd23, %r13;
	sub.s64 	%rd4, %rd18, %rd23;
	.loc	1 72 24                         // cross_entropy.py:72:24
	setp.lt.s64 	%p38, %rd4, 0;
	.loc	1 72 42                         // cross_entropy.py:72:42
	cvt.s64.s32 	%rd24, %r14;
	setp.ge.s64 	%p39, %rd4, %rd24;
	mov.f32 	%f326, 0f00000000;
	.loc	1 72 11                         // cross_entropy.py:72:11
	or.pred  	%p40, %p38, %p39;
	@%p40 bra 	$L__BB0_8;
// %bb.7:
	.loc	1 0 0                           // cross_entropy.py:0:0
	shl.b64 	%rd26, %rd4, 1;
	add.s64 	%rd25, %rd2, %rd26;
	.loc	1 73 35                         // cross_entropy.py:73:35
	// begin inline asm
	mov.u16 %rs66, 0x0;
	@%p35 ld.global.b16 { %rs66 }, [ %rd25 + 0 ];
	// end inline asm
	.loc	1 73 61                         // cross_entropy.py:73:61
	// begin inline asm
	cvt.f32.bf16 %r160, %rs66;
	// end inline asm
	mov.b32 	%f316, %r160;
	.loc	1 81 53                         // cross_entropy.py:81:53
	neg.f32 	%f317, %f14;
	fma.rn.f32 	%f326, %f317, %f316, %f11;
$L__BB0_8:
	.loc	1 89 40                         // cross_entropy.py:89:40
	mul.f32 	%f318, %f15, %f11;
	.loc	1 89 46                         // cross_entropy.py:89:46
	mul.f32 	%f319, %f11, %f318;
	.loc	1 90 20                         // cross_entropy.py:90:20
	fma.rn.f32 	%f320, %f11, %f318, %f326;
	.loc	1 93 33                         // cross_entropy.py:93:33
	mov.b32 	%r165, %f320;
	.loc	1 95 39                         // cross_entropy.py:95:39
	mov.b32 	%r166, %f319;
$L__BB0_9:
	.loc	1 93 24                         // cross_entropy.py:93:24
	add.s64 	%rd27, %rd5, %rd20;
	.loc	1 93 33                         // cross_entropy.py:93:33
	// begin inline asm
	@%p42 st.global.b32 [ %rd27 + 0 ], { %r165 };
	// end inline asm
	.loc	1 95 30                         // cross_entropy.py:95:30
	add.s64 	%rd28, %rd7, %rd20;
	.loc	1 95 39                         // cross_entropy.py:95:39
	// begin inline asm
	@%p42 st.global.b32 [ %rd28 + 0 ], { %r166 };
	// end inline asm
	.loc	1 94 4                          // cross_entropy.py:94:4
	ret;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/flash_attn/ops/triton/cross_entropy.py"
	.file	2 "/root/workspace/miniconda3/envs/vrag/lib/python3.10/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 224                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xd9 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 114
.b8 111
.b8 115
.b8 115
.b8 95
.b8 101
.b8 110
.b8 116
.b8 114
.b8 111
.b8 112
.b8 121
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 47                                  // DW_AT_comp_dir
.b8 114
.b8 111
.b8 111
.b8 116
.b8 47
.b8 119
.b8 111
.b8 114
.b8 107
.b8 115
.b8 112
.b8 97
.b8 99
.b8 101
.b8 47
.b8 109
.b8 105
.b8 110
.b8 105
.b8 99
.b8 111
.b8 110
.b8 100
.b8 97
.b8 51
.b8 47
.b8 101
.b8 110
.b8 118
.b8 115
.b8 47
.b8 118
.b8 114
.b8 97
.b8 103
.b8 47
.b8 108
.b8 105
.b8 98
.b8 47
.b8 112
.b8 121
.b8 116
.b8 104
.b8 111
.b8 110
.b8 51
.b8 46
.b8 49
.b8 48
.b8 47
.b8 115
.b8 105
.b8 116
.b8 101
.b8 45
.b8 112
.b8 97
.b8 99
.b8 107
.b8 97
.b8 103
.b8 101
.b8 115
.b8 47
.b8 102
.b8 108
.b8 97
.b8 115
.b8 104
.b8 95
.b8 97
.b8 116
.b8 116
.b8 110
.b8 47
.b8 111
.b8 112
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // Abbrev [2] 0x82:0x1b DW_TAG_subprogram
.b8 99                                  // DW_AT_name
.b8 114
.b8 111
.b8 115
.b8 115
.b8 95
.b8 101
.b8 110
.b8 116
.b8 114
.b8 111
.b8 112
.b8 121
.b8 95
.b8 102
.b8 119
.b8 100
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0x9d:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 130                                // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xb2:0x18 DW_TAG_inlined_subroutine
.b32 130                                // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 59                                  // DW_AT_call_line
.b8 45                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xca:0x18 DW_TAG_inlined_subroutine
.b32 130                                // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 60                                  // DW_AT_call_line
.b8 55                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
